<?php
/**
 * Customer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * The version of the OpenAPI document: 1.84.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbeyersdorf\easybill\Model;

use \ArrayAccess;
use \cbeyersdorf\easybill\ObjectSerializer;

/**
 * Customer Class Doc Comment
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Customer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Customer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'acquire_options' => 'int',
        'additional_groups_ids' => 'int[]',
        'bank_account' => 'string',
        'bank_account_owner' => 'string',
        'bank_bic' => 'string',
        'bank_code' => 'string',
        'bank_iban' => 'string',
        'bank_name' => 'string',
        'birth_date' => '\DateTime',
        'cash_allowance' => 'float',
        'cash_allowance_days' => 'int',
        'cash_discount' => 'float',
        'cash_discount_type' => 'string',
        'city' => 'string',
        'state' => 'string',
        'company_name' => 'string',
        'country' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => 'string',
        'delivery_title' => 'string',
        'delivery_city' => 'string',
        'delivery_state' => 'string',
        'delivery_company_name' => 'string',
        'delivery_country' => 'string',
        'delivery_first_name' => 'string',
        'delivery_last_name' => 'string',
        'delivery_personal' => 'bool',
        'delivery_salutation' => 'int',
        'delivery_street' => 'string',
        'delivery_suffix_1' => 'string',
        'delivery_suffix_2' => 'string',
        'delivery_zip_code' => 'string',
        'display_name' => 'string',
        'emails' => 'string[]',
        'fax' => 'string',
        'first_name' => 'string',
        'grace_period' => 'int',
        'due_in_days' => 'int',
        'group_id' => 'int',
        'id' => 'int',
        'info_1' => 'string',
        'info_2' => 'string',
        'internet' => 'string',
        'last_name' => 'string',
        'login_id' => 'int',
        'mobile' => 'string',
        'note' => 'string',
        'number' => 'string',
        'payment_options' => 'int',
        'personal' => 'bool',
        'phone_1' => 'string',
        'phone_2' => 'string',
        'postbox' => 'string',
        'postbox_city' => 'string',
        'postbox_state' => 'string',
        'postbox_country' => 'string',
        'postbox_zip_code' => 'string',
        'sale_price_level' => 'string',
        'salutation' => 'int',
        'sepa_agreement' => 'string',
        'sepa_agreement_date' => '\DateTime',
        'sepa_mandate_reference' => 'string',
        'since_date' => '\DateTime',
        'street' => 'string',
        'suffix_1' => 'string',
        'suffix_2' => 'string',
        'tax_number' => 'string',
        'court' => 'string',
        'court_registry_number' => 'string',
        'tax_options' => 'string',
        'title' => 'string',
        'archived' => 'bool',
        'vat_identifier' => 'string',
        'zip_code' => 'string',
        'document_pdf_type' => 'string',
        'buyer_reference' => 'string',
        'foreign_supplier_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'acquire_options' => null,
        'additional_groups_ids' => null,
        'bank_account' => null,
        'bank_account_owner' => null,
        'bank_bic' => null,
        'bank_code' => null,
        'bank_iban' => null,
        'bank_name' => null,
        'birth_date' => 'date',
        'cash_allowance' => 'float',
        'cash_allowance_days' => null,
        'cash_discount' => 'float',
        'cash_discount_type' => null,
        'city' => null,
        'state' => null,
        'company_name' => null,
        'country' => null,
        'created_at' => 'date',
        'updated_at' => 'datetime',
        'delivery_title' => null,
        'delivery_city' => null,
        'delivery_state' => null,
        'delivery_company_name' => null,
        'delivery_country' => null,
        'delivery_first_name' => null,
        'delivery_last_name' => null,
        'delivery_personal' => null,
        'delivery_salutation' => null,
        'delivery_street' => null,
        'delivery_suffix_1' => null,
        'delivery_suffix_2' => null,
        'delivery_zip_code' => null,
        'display_name' => null,
        'emails' => null,
        'fax' => null,
        'first_name' => null,
        'grace_period' => null,
        'due_in_days' => null,
        'group_id' => null,
        'id' => 'int64',
        'info_1' => null,
        'info_2' => null,
        'internet' => null,
        'last_name' => null,
        'login_id' => 'int64',
        'mobile' => null,
        'note' => null,
        'number' => null,
        'payment_options' => null,
        'personal' => null,
        'phone_1' => null,
        'phone_2' => null,
        'postbox' => null,
        'postbox_city' => null,
        'postbox_state' => null,
        'postbox_country' => null,
        'postbox_zip_code' => null,
        'sale_price_level' => null,
        'salutation' => null,
        'sepa_agreement' => null,
        'sepa_agreement_date' => 'date',
        'sepa_mandate_reference' => null,
        'since_date' => 'date',
        'street' => null,
        'suffix_1' => null,
        'suffix_2' => null,
        'tax_number' => null,
        'court' => null,
        'court_registry_number' => null,
        'tax_options' => null,
        'title' => null,
        'archived' => null,
        'vat_identifier' => null,
        'zip_code' => null,
        'document_pdf_type' => null,
        'buyer_reference' => null,
        'foreign_supplier_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'acquire_options' => true,
        'additional_groups_ids' => false,
        'bank_account' => true,
        'bank_account_owner' => true,
        'bank_bic' => true,
        'bank_code' => true,
        'bank_iban' => true,
        'bank_name' => true,
        'birth_date' => true,
        'cash_allowance' => true,
        'cash_allowance_days' => false,
        'cash_discount' => true,
        'cash_discount_type' => true,
        'city' => true,
        'state' => false,
        'company_name' => true,
        'country' => false,
        'created_at' => false,
        'updated_at' => false,
        'delivery_title' => false,
        'delivery_city' => true,
        'delivery_state' => false,
        'delivery_company_name' => true,
        'delivery_country' => true,
        'delivery_first_name' => true,
        'delivery_last_name' => true,
        'delivery_personal' => false,
        'delivery_salutation' => false,
        'delivery_street' => true,
        'delivery_suffix_1' => true,
        'delivery_suffix_2' => true,
        'delivery_zip_code' => true,
        'display_name' => false,
        'emails' => false,
        'fax' => true,
        'first_name' => true,
        'grace_period' => true,
        'due_in_days' => true,
        'group_id' => true,
        'id' => false,
        'info_1' => true,
        'info_2' => true,
        'internet' => true,
        'last_name' => true,
        'login_id' => false,
        'mobile' => true,
        'note' => true,
        'number' => false,
        'payment_options' => true,
        'personal' => false,
        'phone_1' => true,
        'phone_2' => true,
        'postbox' => true,
        'postbox_city' => true,
        'postbox_state' => false,
        'postbox_country' => true,
        'postbox_zip_code' => true,
        'sale_price_level' => true,
        'salutation' => false,
        'sepa_agreement' => true,
        'sepa_agreement_date' => true,
        'sepa_mandate_reference' => true,
        'since_date' => true,
        'street' => true,
        'suffix_1' => true,
        'suffix_2' => true,
        'tax_number' => true,
        'court' => true,
        'court_registry_number' => true,
        'tax_options' => true,
        'title' => true,
        'archived' => false,
        'vat_identifier' => true,
        'zip_code' => true,
        'document_pdf_type' => false,
        'buyer_reference' => false,
        'foreign_supplier_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'acquire_options' => 'acquire_options',
        'additional_groups_ids' => 'additional_groups_ids',
        'bank_account' => 'bank_account',
        'bank_account_owner' => 'bank_account_owner',
        'bank_bic' => 'bank_bic',
        'bank_code' => 'bank_code',
        'bank_iban' => 'bank_iban',
        'bank_name' => 'bank_name',
        'birth_date' => 'birth_date',
        'cash_allowance' => 'cash_allowance',
        'cash_allowance_days' => 'cash_allowance_days',
        'cash_discount' => 'cash_discount',
        'cash_discount_type' => 'cash_discount_type',
        'city' => 'city',
        'state' => 'state',
        'company_name' => 'company_name',
        'country' => 'country',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'delivery_title' => 'delivery_title',
        'delivery_city' => 'delivery_city',
        'delivery_state' => 'delivery_state',
        'delivery_company_name' => 'delivery_company_name',
        'delivery_country' => 'delivery_country',
        'delivery_first_name' => 'delivery_first_name',
        'delivery_last_name' => 'delivery_last_name',
        'delivery_personal' => 'delivery_personal',
        'delivery_salutation' => 'delivery_salutation',
        'delivery_street' => 'delivery_street',
        'delivery_suffix_1' => 'delivery_suffix_1',
        'delivery_suffix_2' => 'delivery_suffix_2',
        'delivery_zip_code' => 'delivery_zip_code',
        'display_name' => 'display_name',
        'emails' => 'emails',
        'fax' => 'fax',
        'first_name' => 'first_name',
        'grace_period' => 'grace_period',
        'due_in_days' => 'due_in_days',
        'group_id' => 'group_id',
        'id' => 'id',
        'info_1' => 'info_1',
        'info_2' => 'info_2',
        'internet' => 'internet',
        'last_name' => 'last_name',
        'login_id' => 'login_id',
        'mobile' => 'mobile',
        'note' => 'note',
        'number' => 'number',
        'payment_options' => 'payment_options',
        'personal' => 'personal',
        'phone_1' => 'phone_1',
        'phone_2' => 'phone_2',
        'postbox' => 'postbox',
        'postbox_city' => 'postbox_city',
        'postbox_state' => 'postbox_state',
        'postbox_country' => 'postbox_country',
        'postbox_zip_code' => 'postbox_zip_code',
        'sale_price_level' => 'sale_price_level',
        'salutation' => 'salutation',
        'sepa_agreement' => 'sepa_agreement',
        'sepa_agreement_date' => 'sepa_agreement_date',
        'sepa_mandate_reference' => 'sepa_mandate_reference',
        'since_date' => 'since_date',
        'street' => 'street',
        'suffix_1' => 'suffix_1',
        'suffix_2' => 'suffix_2',
        'tax_number' => 'tax_number',
        'court' => 'court',
        'court_registry_number' => 'court_registry_number',
        'tax_options' => 'tax_options',
        'title' => 'title',
        'archived' => 'archived',
        'vat_identifier' => 'vat_identifier',
        'zip_code' => 'zip_code',
        'document_pdf_type' => 'document_pdf_type',
        'buyer_reference' => 'buyer_reference',
        'foreign_supplier_number' => 'foreign_supplier_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'acquire_options' => 'setAcquireOptions',
        'additional_groups_ids' => 'setAdditionalGroupsIds',
        'bank_account' => 'setBankAccount',
        'bank_account_owner' => 'setBankAccountOwner',
        'bank_bic' => 'setBankBic',
        'bank_code' => 'setBankCode',
        'bank_iban' => 'setBankIban',
        'bank_name' => 'setBankName',
        'birth_date' => 'setBirthDate',
        'cash_allowance' => 'setCashAllowance',
        'cash_allowance_days' => 'setCashAllowanceDays',
        'cash_discount' => 'setCashDiscount',
        'cash_discount_type' => 'setCashDiscountType',
        'city' => 'setCity',
        'state' => 'setState',
        'company_name' => 'setCompanyName',
        'country' => 'setCountry',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'delivery_title' => 'setDeliveryTitle',
        'delivery_city' => 'setDeliveryCity',
        'delivery_state' => 'setDeliveryState',
        'delivery_company_name' => 'setDeliveryCompanyName',
        'delivery_country' => 'setDeliveryCountry',
        'delivery_first_name' => 'setDeliveryFirstName',
        'delivery_last_name' => 'setDeliveryLastName',
        'delivery_personal' => 'setDeliveryPersonal',
        'delivery_salutation' => 'setDeliverySalutation',
        'delivery_street' => 'setDeliveryStreet',
        'delivery_suffix_1' => 'setDeliverySuffix1',
        'delivery_suffix_2' => 'setDeliverySuffix2',
        'delivery_zip_code' => 'setDeliveryZipCode',
        'display_name' => 'setDisplayName',
        'emails' => 'setEmails',
        'fax' => 'setFax',
        'first_name' => 'setFirstName',
        'grace_period' => 'setGracePeriod',
        'due_in_days' => 'setDueInDays',
        'group_id' => 'setGroupId',
        'id' => 'setId',
        'info_1' => 'setInfo1',
        'info_2' => 'setInfo2',
        'internet' => 'setInternet',
        'last_name' => 'setLastName',
        'login_id' => 'setLoginId',
        'mobile' => 'setMobile',
        'note' => 'setNote',
        'number' => 'setNumber',
        'payment_options' => 'setPaymentOptions',
        'personal' => 'setPersonal',
        'phone_1' => 'setPhone1',
        'phone_2' => 'setPhone2',
        'postbox' => 'setPostbox',
        'postbox_city' => 'setPostboxCity',
        'postbox_state' => 'setPostboxState',
        'postbox_country' => 'setPostboxCountry',
        'postbox_zip_code' => 'setPostboxZipCode',
        'sale_price_level' => 'setSalePriceLevel',
        'salutation' => 'setSalutation',
        'sepa_agreement' => 'setSepaAgreement',
        'sepa_agreement_date' => 'setSepaAgreementDate',
        'sepa_mandate_reference' => 'setSepaMandateReference',
        'since_date' => 'setSinceDate',
        'street' => 'setStreet',
        'suffix_1' => 'setSuffix1',
        'suffix_2' => 'setSuffix2',
        'tax_number' => 'setTaxNumber',
        'court' => 'setCourt',
        'court_registry_number' => 'setCourtRegistryNumber',
        'tax_options' => 'setTaxOptions',
        'title' => 'setTitle',
        'archived' => 'setArchived',
        'vat_identifier' => 'setVatIdentifier',
        'zip_code' => 'setZipCode',
        'document_pdf_type' => 'setDocumentPdfType',
        'buyer_reference' => 'setBuyerReference',
        'foreign_supplier_number' => 'setForeignSupplierNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'acquire_options' => 'getAcquireOptions',
        'additional_groups_ids' => 'getAdditionalGroupsIds',
        'bank_account' => 'getBankAccount',
        'bank_account_owner' => 'getBankAccountOwner',
        'bank_bic' => 'getBankBic',
        'bank_code' => 'getBankCode',
        'bank_iban' => 'getBankIban',
        'bank_name' => 'getBankName',
        'birth_date' => 'getBirthDate',
        'cash_allowance' => 'getCashAllowance',
        'cash_allowance_days' => 'getCashAllowanceDays',
        'cash_discount' => 'getCashDiscount',
        'cash_discount_type' => 'getCashDiscountType',
        'city' => 'getCity',
        'state' => 'getState',
        'company_name' => 'getCompanyName',
        'country' => 'getCountry',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'delivery_title' => 'getDeliveryTitle',
        'delivery_city' => 'getDeliveryCity',
        'delivery_state' => 'getDeliveryState',
        'delivery_company_name' => 'getDeliveryCompanyName',
        'delivery_country' => 'getDeliveryCountry',
        'delivery_first_name' => 'getDeliveryFirstName',
        'delivery_last_name' => 'getDeliveryLastName',
        'delivery_personal' => 'getDeliveryPersonal',
        'delivery_salutation' => 'getDeliverySalutation',
        'delivery_street' => 'getDeliveryStreet',
        'delivery_suffix_1' => 'getDeliverySuffix1',
        'delivery_suffix_2' => 'getDeliverySuffix2',
        'delivery_zip_code' => 'getDeliveryZipCode',
        'display_name' => 'getDisplayName',
        'emails' => 'getEmails',
        'fax' => 'getFax',
        'first_name' => 'getFirstName',
        'grace_period' => 'getGracePeriod',
        'due_in_days' => 'getDueInDays',
        'group_id' => 'getGroupId',
        'id' => 'getId',
        'info_1' => 'getInfo1',
        'info_2' => 'getInfo2',
        'internet' => 'getInternet',
        'last_name' => 'getLastName',
        'login_id' => 'getLoginId',
        'mobile' => 'getMobile',
        'note' => 'getNote',
        'number' => 'getNumber',
        'payment_options' => 'getPaymentOptions',
        'personal' => 'getPersonal',
        'phone_1' => 'getPhone1',
        'phone_2' => 'getPhone2',
        'postbox' => 'getPostbox',
        'postbox_city' => 'getPostboxCity',
        'postbox_state' => 'getPostboxState',
        'postbox_country' => 'getPostboxCountry',
        'postbox_zip_code' => 'getPostboxZipCode',
        'sale_price_level' => 'getSalePriceLevel',
        'salutation' => 'getSalutation',
        'sepa_agreement' => 'getSepaAgreement',
        'sepa_agreement_date' => 'getSepaAgreementDate',
        'sepa_mandate_reference' => 'getSepaMandateReference',
        'since_date' => 'getSinceDate',
        'street' => 'getStreet',
        'suffix_1' => 'getSuffix1',
        'suffix_2' => 'getSuffix2',
        'tax_number' => 'getTaxNumber',
        'court' => 'getCourt',
        'court_registry_number' => 'getCourtRegistryNumber',
        'tax_options' => 'getTaxOptions',
        'title' => 'getTitle',
        'archived' => 'getArchived',
        'vat_identifier' => 'getVatIdentifier',
        'zip_code' => 'getZipCode',
        'document_pdf_type' => 'getDocumentPdfType',
        'buyer_reference' => 'getBuyerReference',
        'foreign_supplier_number' => 'getForeignSupplierNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CASH_DISCOUNT_TYPE_PERCENT = 'PERCENT';
    public const CASH_DISCOUNT_TYPE_AMOUNT = 'AMOUNT';
    public const SALE_PRICE_LEVEL_SALEPRICE2 = 'SALEPRICE2';
    public const SALE_PRICE_LEVEL_SALEPRICE3 = 'SALEPRICE3';
    public const SALE_PRICE_LEVEL_SALEPRICE4 = 'SALEPRICE4';
    public const SALE_PRICE_LEVEL_SALEPRICE5 = 'SALEPRICE5';
    public const SALE_PRICE_LEVEL_SALEPRICE6 = 'SALEPRICE6';
    public const SALE_PRICE_LEVEL_SALEPRICE7 = 'SALEPRICE7';
    public const SALE_PRICE_LEVEL_SALEPRICE8 = 'SALEPRICE8';
    public const SALE_PRICE_LEVEL_SALEPRICE9 = 'SALEPRICE9';
    public const SALE_PRICE_LEVEL_SALEPRICE10 = 'SALEPRICE10';
    public const SEPA_AGREEMENT_BASIC = 'BASIC';
    public const SEPA_AGREEMENT_COR1 = 'COR1';
    public const SEPA_AGREEMENT_COMPANY = 'COMPANY';
    public const SEPA_AGREEMENT_NULL = NULL;
    public const TAX_OPTIONS_N_STB = 'nStb';
    public const TAX_OPTIONS_N_STB_UST_ID = 'nStbUstID';
    public const TAX_OPTIONS_N_STB_NONE_UST_ID = 'nStbNoneUstID';
    public const TAX_OPTIONS_N_STB_IM = 'nStbIm';
    public const TAX_OPTIONS_REVC = 'revc';
    public const TAX_OPTIONS_IG = 'IG';
    public const TAX_OPTIONS_AL = 'AL';
    public const TAX_OPTIONS_S_STFR = 'sStfr';
    public const TAX_OPTIONS_NULL = NULL;
    public const DOCUMENT_PDF_TYPE__DEFAULT = 'default';
    public const DOCUMENT_PDF_TYPE_ZUGFERD1 = 'zugferd1';
    public const DOCUMENT_PDF_TYPE_ZUGFERD2_2 = 'zugferd2_2';
    public const DOCUMENT_PDF_TYPE_XRECHNUNG2_1_XML = 'xrechnung2_1_xml';
    public const DOCUMENT_PDF_TYPE_XRECHNUNG2_2_XML = 'xrechnung2_2_xml';
    public const DOCUMENT_PDF_TYPE_XRECHNUNG2_3_XML = 'xrechnung2_3_xml';
    public const DOCUMENT_PDF_TYPE_XRECHNUNG3_0_XML = 'xrechnung3_0_xml';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCashDiscountTypeAllowableValues()
    {
        return [
            self::CASH_DISCOUNT_TYPE_PERCENT,
            self::CASH_DISCOUNT_TYPE_AMOUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSalePriceLevelAllowableValues()
    {
        return [
            self::SALE_PRICE_LEVEL_SALEPRICE2,
            self::SALE_PRICE_LEVEL_SALEPRICE3,
            self::SALE_PRICE_LEVEL_SALEPRICE4,
            self::SALE_PRICE_LEVEL_SALEPRICE5,
            self::SALE_PRICE_LEVEL_SALEPRICE6,
            self::SALE_PRICE_LEVEL_SALEPRICE7,
            self::SALE_PRICE_LEVEL_SALEPRICE8,
            self::SALE_PRICE_LEVEL_SALEPRICE9,
            self::SALE_PRICE_LEVEL_SALEPRICE10,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSepaAgreementAllowableValues()
    {
        return [
            self::SEPA_AGREEMENT_BASIC,
            self::SEPA_AGREEMENT_COR1,
            self::SEPA_AGREEMENT_COMPANY,
            self::SEPA_AGREEMENT_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxOptionsAllowableValues()
    {
        return [
            self::TAX_OPTIONS_N_STB,
            self::TAX_OPTIONS_N_STB_UST_ID,
            self::TAX_OPTIONS_N_STB_NONE_UST_ID,
            self::TAX_OPTIONS_N_STB_IM,
            self::TAX_OPTIONS_REVC,
            self::TAX_OPTIONS_IG,
            self::TAX_OPTIONS_AL,
            self::TAX_OPTIONS_S_STFR,
            self::TAX_OPTIONS_NULL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentPdfTypeAllowableValues()
    {
        return [
            self::DOCUMENT_PDF_TYPE__DEFAULT,
            self::DOCUMENT_PDF_TYPE_ZUGFERD1,
            self::DOCUMENT_PDF_TYPE_ZUGFERD2_2,
            self::DOCUMENT_PDF_TYPE_XRECHNUNG2_1_XML,
            self::DOCUMENT_PDF_TYPE_XRECHNUNG2_2_XML,
            self::DOCUMENT_PDF_TYPE_XRECHNUNG2_3_XML,
            self::DOCUMENT_PDF_TYPE_XRECHNUNG3_0_XML,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('acquire_options', $data ?? [], null);
        $this->setIfExists('additional_groups_ids', $data ?? [], null);
        $this->setIfExists('bank_account', $data ?? [], null);
        $this->setIfExists('bank_account_owner', $data ?? [], null);
        $this->setIfExists('bank_bic', $data ?? [], null);
        $this->setIfExists('bank_code', $data ?? [], null);
        $this->setIfExists('bank_iban', $data ?? [], null);
        $this->setIfExists('bank_name', $data ?? [], null);
        $this->setIfExists('birth_date', $data ?? [], null);
        $this->setIfExists('cash_allowance', $data ?? [], null);
        $this->setIfExists('cash_allowance_days', $data ?? [], null);
        $this->setIfExists('cash_discount', $data ?? [], null);
        $this->setIfExists('cash_discount_type', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('company_name', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('delivery_title', $data ?? [], null);
        $this->setIfExists('delivery_city', $data ?? [], null);
        $this->setIfExists('delivery_state', $data ?? [], null);
        $this->setIfExists('delivery_company_name', $data ?? [], null);
        $this->setIfExists('delivery_country', $data ?? [], null);
        $this->setIfExists('delivery_first_name', $data ?? [], null);
        $this->setIfExists('delivery_last_name', $data ?? [], null);
        $this->setIfExists('delivery_personal', $data ?? [], null);
        $this->setIfExists('delivery_salutation', $data ?? [], null);
        $this->setIfExists('delivery_street', $data ?? [], null);
        $this->setIfExists('delivery_suffix_1', $data ?? [], null);
        $this->setIfExists('delivery_suffix_2', $data ?? [], null);
        $this->setIfExists('delivery_zip_code', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('emails', $data ?? [], null);
        $this->setIfExists('fax', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('grace_period', $data ?? [], null);
        $this->setIfExists('due_in_days', $data ?? [], null);
        $this->setIfExists('group_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('info_1', $data ?? [], null);
        $this->setIfExists('info_2', $data ?? [], null);
        $this->setIfExists('internet', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('login_id', $data ?? [], null);
        $this->setIfExists('mobile', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('payment_options', $data ?? [], null);
        $this->setIfExists('personal', $data ?? [], false);
        $this->setIfExists('phone_1', $data ?? [], null);
        $this->setIfExists('phone_2', $data ?? [], null);
        $this->setIfExists('postbox', $data ?? [], null);
        $this->setIfExists('postbox_city', $data ?? [], null);
        $this->setIfExists('postbox_state', $data ?? [], null);
        $this->setIfExists('postbox_country', $data ?? [], null);
        $this->setIfExists('postbox_zip_code', $data ?? [], null);
        $this->setIfExists('sale_price_level', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('sepa_agreement', $data ?? [], null);
        $this->setIfExists('sepa_agreement_date', $data ?? [], null);
        $this->setIfExists('sepa_mandate_reference', $data ?? [], null);
        $this->setIfExists('since_date', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('suffix_1', $data ?? [], null);
        $this->setIfExists('suffix_2', $data ?? [], null);
        $this->setIfExists('tax_number', $data ?? [], null);
        $this->setIfExists('court', $data ?? [], null);
        $this->setIfExists('court_registry_number', $data ?? [], null);
        $this->setIfExists('tax_options', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('vat_identifier', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('document_pdf_type', $data ?? [], 'default');
        $this->setIfExists('buyer_reference', $data ?? [], null);
        $this->setIfExists('foreign_supplier_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['cash_allowance']) && ($this->container['cash_allowance'] > 1E+2)) {
            $invalidProperties[] = "invalid value for 'cash_allowance', must be smaller than or equal to 1E+2.";
        }

        if (!is_null($this->container['cash_allowance']) && ($this->container['cash_allowance'] < 0)) {
            $invalidProperties[] = "invalid value for 'cash_allowance', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getCashDiscountTypeAllowableValues();
        if (!is_null($this->container['cash_discount_type']) && !in_array($this->container['cash_discount_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cash_discount_type', must be one of '%s'",
                $this->container['cash_discount_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        $allowedValues = $this->getSalePriceLevelAllowableValues();
        if (!is_null($this->container['sale_price_level']) && !in_array($this->container['sale_price_level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sale_price_level', must be one of '%s'",
                $this->container['sale_price_level'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSepaAgreementAllowableValues();
        if (!is_null($this->container['sepa_agreement']) && !in_array($this->container['sepa_agreement'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sepa_agreement', must be one of '%s'",
                $this->container['sepa_agreement'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxOptionsAllowableValues();
        if (!is_null($this->container['tax_options']) && !in_array($this->container['tax_options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tax_options', must be one of '%s'",
                $this->container['tax_options'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDocumentPdfTypeAllowableValues();
        if (!is_null($this->container['document_pdf_type']) && !in_array($this->container['document_pdf_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'document_pdf_type', must be one of '%s'",
                $this->container['document_pdf_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets acquire_options
     *
     * @return int|null
     */
    public function getAcquireOptions()
    {
        return $this->container['acquire_options'];
    }

    /**
     * Sets acquire_options
     *
     * @param int|null $acquire_options 1 = Empfehlung eines anderen Kunden, 2 = Zeitungsanzeige, 3 = Eigene Akquisition, 4 = Mitarbeiter Akquisition, 5 = Google, 6 = Gelbe Seiten, 7 = Kostenlose Internet Plattform, 8 = Bezahlte Internet Plattform
     *
     * @return self
     */
    public function setAcquireOptions($acquire_options)
    {
        if (is_null($acquire_options)) {
            array_push($this->openAPINullablesSetToNull, 'acquire_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('acquire_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['acquire_options'] = $acquire_options;

        return $this;
    }

    /**
     * Gets additional_groups_ids
     *
     * @return int[]|null
     */
    public function getAdditionalGroupsIds()
    {
        return $this->container['additional_groups_ids'];
    }

    /**
     * Sets additional_groups_ids
     *
     * @param int[]|null $additional_groups_ids additional_groups_ids
     *
     * @return self
     */
    public function setAdditionalGroupsIds($additional_groups_ids)
    {
        if (is_null($additional_groups_ids)) {
            throw new \InvalidArgumentException('non-nullable additional_groups_ids cannot be null');
        }
        $this->container['additional_groups_ids'] = $additional_groups_ids;

        return $this;
    }

    /**
     * Gets bank_account
     *
     * @return string|null
     */
    public function getBankAccount()
    {
        return $this->container['bank_account'];
    }

    /**
     * Sets bank_account
     *
     * @param string|null $bank_account bank_account
     *
     * @return self
     */
    public function setBankAccount($bank_account)
    {
        if (is_null($bank_account)) {
            array_push($this->openAPINullablesSetToNull, 'bank_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_account'] = $bank_account;

        return $this;
    }

    /**
     * Gets bank_account_owner
     *
     * @return string|null
     */
    public function getBankAccountOwner()
    {
        return $this->container['bank_account_owner'];
    }

    /**
     * Sets bank_account_owner
     *
     * @param string|null $bank_account_owner bank_account_owner
     *
     * @return self
     */
    public function setBankAccountOwner($bank_account_owner)
    {
        if (is_null($bank_account_owner)) {
            array_push($this->openAPINullablesSetToNull, 'bank_account_owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_account_owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_account_owner'] = $bank_account_owner;

        return $this;
    }

    /**
     * Gets bank_bic
     *
     * @return string|null
     */
    public function getBankBic()
    {
        return $this->container['bank_bic'];
    }

    /**
     * Sets bank_bic
     *
     * @param string|null $bank_bic bank_bic
     *
     * @return self
     */
    public function setBankBic($bank_bic)
    {
        if (is_null($bank_bic)) {
            array_push($this->openAPINullablesSetToNull, 'bank_bic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_bic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_bic'] = $bank_bic;

        return $this;
    }

    /**
     * Gets bank_code
     *
     * @return string|null
     */
    public function getBankCode()
    {
        return $this->container['bank_code'];
    }

    /**
     * Sets bank_code
     *
     * @param string|null $bank_code bank_code
     *
     * @return self
     */
    public function setBankCode($bank_code)
    {
        if (is_null($bank_code)) {
            array_push($this->openAPINullablesSetToNull, 'bank_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_code'] = $bank_code;

        return $this;
    }

    /**
     * Gets bank_iban
     *
     * @return string|null
     */
    public function getBankIban()
    {
        return $this->container['bank_iban'];
    }

    /**
     * Sets bank_iban
     *
     * @param string|null $bank_iban bank_iban
     *
     * @return self
     */
    public function setBankIban($bank_iban)
    {
        if (is_null($bank_iban)) {
            array_push($this->openAPINullablesSetToNull, 'bank_iban');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_iban', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_iban'] = $bank_iban;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string|null
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string|null $bank_name bank_name
     *
     * @return self
     */
    public function setBankName($bank_name)
    {
        if (is_null($bank_name)) {
            array_push($this->openAPINullablesSetToNull, 'bank_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {
        if (is_null($birth_date)) {
            array_push($this->openAPINullablesSetToNull, 'birth_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birth_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets cash_allowance
     *
     * @return float|null
     */
    public function getCashAllowance()
    {
        return $this->container['cash_allowance'];
    }

    /**
     * Sets cash_allowance
     *
     * @param float|null $cash_allowance cash_allowance
     *
     * @return self
     */
    public function setCashAllowance($cash_allowance)
    {
        if (is_null($cash_allowance)) {
            array_push($this->openAPINullablesSetToNull, 'cash_allowance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_allowance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($cash_allowance) && ($cash_allowance > 1E+2)) {
            throw new \InvalidArgumentException('invalid value for $cash_allowance when calling Customer., must be smaller than or equal to 1E+2.');
        }
        if (!is_null($cash_allowance) && ($cash_allowance < 0)) {
            throw new \InvalidArgumentException('invalid value for $cash_allowance when calling Customer., must be bigger than or equal to 0.');
        }

        $this->container['cash_allowance'] = $cash_allowance;

        return $this;
    }

    /**
     * Gets cash_allowance_days
     *
     * @return int|null
     */
    public function getCashAllowanceDays()
    {
        return $this->container['cash_allowance_days'];
    }

    /**
     * Sets cash_allowance_days
     *
     * @param int|null $cash_allowance_days cash_allowance_days
     *
     * @return self
     */
    public function setCashAllowanceDays($cash_allowance_days)
    {
        if (is_null($cash_allowance_days)) {
            throw new \InvalidArgumentException('non-nullable cash_allowance_days cannot be null');
        }
        $this->container['cash_allowance_days'] = $cash_allowance_days;

        return $this;
    }

    /**
     * Gets cash_discount
     *
     * @return float|null
     */
    public function getCashDiscount()
    {
        return $this->container['cash_discount'];
    }

    /**
     * Sets cash_discount
     *
     * @param float|null $cash_discount cash_discount
     *
     * @return self
     */
    public function setCashDiscount($cash_discount)
    {
        if (is_null($cash_discount)) {
            array_push($this->openAPINullablesSetToNull, 'cash_discount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_discount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cash_discount'] = $cash_discount;

        return $this;
    }

    /**
     * Gets cash_discount_type
     *
     * @return string|null
     */
    public function getCashDiscountType()
    {
        return $this->container['cash_discount_type'];
    }

    /**
     * Sets cash_discount_type
     *
     * @param string|null $cash_discount_type cash_discount_type
     *
     * @return self
     */
    public function setCashDiscountType($cash_discount_type)
    {
        if (is_null($cash_discount_type)) {
            array_push($this->openAPINullablesSetToNull, 'cash_discount_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_discount_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCashDiscountTypeAllowableValues();
        if (!is_null($cash_discount_type) && !in_array($cash_discount_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cash_discount_type', must be one of '%s'",
                    $cash_discount_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cash_discount_type'] = $cash_discount_type;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {
        if (is_null($company_name)) {
            array_push($this->openAPINullablesSetToNull, 'company_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets delivery_title
     *
     * @return string|null
     */
    public function getDeliveryTitle()
    {
        return $this->container['delivery_title'];
    }

    /**
     * Sets delivery_title
     *
     * @param string|null $delivery_title delivery_title
     *
     * @return self
     */
    public function setDeliveryTitle($delivery_title)
    {
        if (is_null($delivery_title)) {
            throw new \InvalidArgumentException('non-nullable delivery_title cannot be null');
        }
        $this->container['delivery_title'] = $delivery_title;

        return $this;
    }

    /**
     * Gets delivery_city
     *
     * @return string|null
     */
    public function getDeliveryCity()
    {
        return $this->container['delivery_city'];
    }

    /**
     * Sets delivery_city
     *
     * @param string|null $delivery_city delivery_city
     *
     * @return self
     */
    public function setDeliveryCity($delivery_city)
    {
        if (is_null($delivery_city)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_city'] = $delivery_city;

        return $this;
    }

    /**
     * Gets delivery_state
     *
     * @return string|null
     */
    public function getDeliveryState()
    {
        return $this->container['delivery_state'];
    }

    /**
     * Sets delivery_state
     *
     * @param string|null $delivery_state delivery_state
     *
     * @return self
     */
    public function setDeliveryState($delivery_state)
    {
        if (is_null($delivery_state)) {
            throw new \InvalidArgumentException('non-nullable delivery_state cannot be null');
        }
        $this->container['delivery_state'] = $delivery_state;

        return $this;
    }

    /**
     * Gets delivery_company_name
     *
     * @return string|null
     */
    public function getDeliveryCompanyName()
    {
        return $this->container['delivery_company_name'];
    }

    /**
     * Sets delivery_company_name
     *
     * @param string|null $delivery_company_name delivery_company_name
     *
     * @return self
     */
    public function setDeliveryCompanyName($delivery_company_name)
    {
        if (is_null($delivery_company_name)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_company_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_company_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_company_name'] = $delivery_company_name;

        return $this;
    }

    /**
     * Gets delivery_country
     *
     * @return string|null
     */
    public function getDeliveryCountry()
    {
        return $this->container['delivery_country'];
    }

    /**
     * Sets delivery_country
     *
     * @param string|null $delivery_country delivery_country
     *
     * @return self
     */
    public function setDeliveryCountry($delivery_country)
    {
        if (is_null($delivery_country)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_country'] = $delivery_country;

        return $this;
    }

    /**
     * Gets delivery_first_name
     *
     * @return string|null
     */
    public function getDeliveryFirstName()
    {
        return $this->container['delivery_first_name'];
    }

    /**
     * Sets delivery_first_name
     *
     * @param string|null $delivery_first_name delivery_first_name
     *
     * @return self
     */
    public function setDeliveryFirstName($delivery_first_name)
    {
        if (is_null($delivery_first_name)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_first_name'] = $delivery_first_name;

        return $this;
    }

    /**
     * Gets delivery_last_name
     *
     * @return string|null
     */
    public function getDeliveryLastName()
    {
        return $this->container['delivery_last_name'];
    }

    /**
     * Sets delivery_last_name
     *
     * @param string|null $delivery_last_name delivery_last_name
     *
     * @return self
     */
    public function setDeliveryLastName($delivery_last_name)
    {
        if (is_null($delivery_last_name)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_last_name'] = $delivery_last_name;

        return $this;
    }

    /**
     * Gets delivery_personal
     *
     * @return bool|null
     */
    public function getDeliveryPersonal()
    {
        return $this->container['delivery_personal'];
    }

    /**
     * Sets delivery_personal
     *
     * @param bool|null $delivery_personal delivery_personal
     *
     * @return self
     */
    public function setDeliveryPersonal($delivery_personal)
    {
        if (is_null($delivery_personal)) {
            throw new \InvalidArgumentException('non-nullable delivery_personal cannot be null');
        }
        $this->container['delivery_personal'] = $delivery_personal;

        return $this;
    }

    /**
     * Gets delivery_salutation
     *
     * @return int|null
     */
    public function getDeliverySalutation()
    {
        return $this->container['delivery_salutation'];
    }

    /**
     * Sets delivery_salutation
     *
     * @param int|null $delivery_salutation 0 = nothing, 1 = Mr, 2 = Mrs, 3 = Company, 4 = Mr & Mrs, 5 = Married couple, 6 = Family
     *
     * @return self
     */
    public function setDeliverySalutation($delivery_salutation)
    {
        if (is_null($delivery_salutation)) {
            throw new \InvalidArgumentException('non-nullable delivery_salutation cannot be null');
        }
        $this->container['delivery_salutation'] = $delivery_salutation;

        return $this;
    }

    /**
     * Gets delivery_street
     *
     * @return string|null
     */
    public function getDeliveryStreet()
    {
        return $this->container['delivery_street'];
    }

    /**
     * Sets delivery_street
     *
     * @param string|null $delivery_street delivery_street
     *
     * @return self
     */
    public function setDeliveryStreet($delivery_street)
    {
        if (is_null($delivery_street)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_street');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_street', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_street'] = $delivery_street;

        return $this;
    }

    /**
     * Gets delivery_suffix_1
     *
     * @return string|null
     */
    public function getDeliverySuffix1()
    {
        return $this->container['delivery_suffix_1'];
    }

    /**
     * Sets delivery_suffix_1
     *
     * @param string|null $delivery_suffix_1 delivery_suffix_1
     *
     * @return self
     */
    public function setDeliverySuffix1($delivery_suffix_1)
    {
        if (is_null($delivery_suffix_1)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_suffix_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_suffix_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_suffix_1'] = $delivery_suffix_1;

        return $this;
    }

    /**
     * Gets delivery_suffix_2
     *
     * @return string|null
     */
    public function getDeliverySuffix2()
    {
        return $this->container['delivery_suffix_2'];
    }

    /**
     * Sets delivery_suffix_2
     *
     * @param string|null $delivery_suffix_2 delivery_suffix_2
     *
     * @return self
     */
    public function setDeliverySuffix2($delivery_suffix_2)
    {
        if (is_null($delivery_suffix_2)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_suffix_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_suffix_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_suffix_2'] = $delivery_suffix_2;

        return $this;
    }

    /**
     * Gets delivery_zip_code
     *
     * @return string|null
     */
    public function getDeliveryZipCode()
    {
        return $this->container['delivery_zip_code'];
    }

    /**
     * Sets delivery_zip_code
     *
     * @param string|null $delivery_zip_code delivery_zip_code
     *
     * @return self
     */
    public function setDeliveryZipCode($delivery_zip_code)
    {
        if (is_null($delivery_zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['delivery_zip_code'] = $delivery_zip_code;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]|null
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[]|null $emails emails
     *
     * @return self
     */
    public function setEmails($emails)
    {
        if (is_null($emails)) {
            throw new \InvalidArgumentException('non-nullable emails cannot be null');
        }
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (is_null($fax)) {
            array_push($this->openAPINullablesSetToNull, 'fax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets grace_period
     *
     * @return int|null
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     *
     * @param int|null $grace_period will be replaced by its alias due_in_days.
     *
     * @return self
     */
    public function setGracePeriod($grace_period)
    {
        if (is_null($grace_period)) {
            array_push($this->openAPINullablesSetToNull, 'grace_period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grace_period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets due_in_days
     *
     * @return int|null
     */
    public function getDueInDays()
    {
        return $this->container['due_in_days'];
    }

    /**
     * Sets due_in_days
     *
     * @param int|null $due_in_days due date in days
     *
     * @return self
     */
    public function setDueInDays($due_in_days)
    {
        if (is_null($due_in_days)) {
            array_push($this->openAPINullablesSetToNull, 'due_in_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('due_in_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['due_in_days'] = $due_in_days;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int|null
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int|null $group_id group_id
     *
     * @return self
     */
    public function setGroupId($group_id)
    {
        if (is_null($group_id)) {
            array_push($this->openAPINullablesSetToNull, 'group_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets info_1
     *
     * @return string|null
     */
    public function getInfo1()
    {
        return $this->container['info_1'];
    }

    /**
     * Sets info_1
     *
     * @param string|null $info_1 info_1
     *
     * @return self
     */
    public function setInfo1($info_1)
    {
        if (is_null($info_1)) {
            array_push($this->openAPINullablesSetToNull, 'info_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('info_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['info_1'] = $info_1;

        return $this;
    }

    /**
     * Gets info_2
     *
     * @return string|null
     */
    public function getInfo2()
    {
        return $this->container['info_2'];
    }

    /**
     * Sets info_2
     *
     * @param string|null $info_2 info_2
     *
     * @return self
     */
    public function setInfo2($info_2)
    {
        if (is_null($info_2)) {
            array_push($this->openAPINullablesSetToNull, 'info_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('info_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['info_2'] = $info_2;

        return $this;
    }

    /**
     * Gets internet
     *
     * @return string|null
     */
    public function getInternet()
    {
        return $this->container['internet'];
    }

    /**
     * Sets internet
     *
     * @param string|null $internet internet
     *
     * @return self
     */
    public function setInternet($internet)
    {
        if (is_null($internet)) {
            array_push($this->openAPINullablesSetToNull, 'internet');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internet', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internet'] = $internet;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return int|null
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param int|null $login_id login_id
     *
     * @return self
     */
    public function setLoginId($login_id)
    {
        if (is_null($login_id)) {
            throw new \InvalidArgumentException('non-nullable login_id cannot be null');
        }
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string|null
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string|null $mobile mobile
     *
     * @return self
     */
    public function setMobile($mobile)
    {
        if (is_null($mobile)) {
            array_push($this->openAPINullablesSetToNull, 'mobile');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mobile', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number Automatically generated if empty.
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets payment_options
     *
     * @return int|null
     */
    public function getPaymentOptions()
    {
        return $this->container['payment_options'];
    }

    /**
     * Sets payment_options
     *
     * @param int|null $payment_options 1 = Stets pünktliche Zahlung, 2 = überwiegend pünktliche Zahlung, 3 = überwiegend verspätete Zahlung, 5 = Grundsätzlich verspätete Zahlung
     *
     * @return self
     */
    public function setPaymentOptions($payment_options)
    {
        if (is_null($payment_options)) {
            array_push($this->openAPINullablesSetToNull, 'payment_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_options'] = $payment_options;

        return $this;
    }

    /**
     * Gets personal
     *
     * @return bool|null
     */
    public function getPersonal()
    {
        return $this->container['personal'];
    }

    /**
     * Sets personal
     *
     * @param bool|null $personal personal
     *
     * @return self
     */
    public function setPersonal($personal)
    {
        if (is_null($personal)) {
            throw new \InvalidArgumentException('non-nullable personal cannot be null');
        }
        $this->container['personal'] = $personal;

        return $this;
    }

    /**
     * Gets phone_1
     *
     * @return string|null
     */
    public function getPhone1()
    {
        return $this->container['phone_1'];
    }

    /**
     * Sets phone_1
     *
     * @param string|null $phone_1 phone_1
     *
     * @return self
     */
    public function setPhone1($phone_1)
    {
        if (is_null($phone_1)) {
            array_push($this->openAPINullablesSetToNull, 'phone_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_1'] = $phone_1;

        return $this;
    }

    /**
     * Gets phone_2
     *
     * @return string|null
     */
    public function getPhone2()
    {
        return $this->container['phone_2'];
    }

    /**
     * Sets phone_2
     *
     * @param string|null $phone_2 phone_2
     *
     * @return self
     */
    public function setPhone2($phone_2)
    {
        if (is_null($phone_2)) {
            array_push($this->openAPINullablesSetToNull, 'phone_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_2'] = $phone_2;

        return $this;
    }

    /**
     * Gets postbox
     *
     * @return string|null
     */
    public function getPostbox()
    {
        return $this->container['postbox'];
    }

    /**
     * Sets postbox
     *
     * @param string|null $postbox postbox
     *
     * @return self
     */
    public function setPostbox($postbox)
    {
        if (is_null($postbox)) {
            array_push($this->openAPINullablesSetToNull, 'postbox');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postbox', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postbox'] = $postbox;

        return $this;
    }

    /**
     * Gets postbox_city
     *
     * @return string|null
     */
    public function getPostboxCity()
    {
        return $this->container['postbox_city'];
    }

    /**
     * Sets postbox_city
     *
     * @param string|null $postbox_city postbox_city
     *
     * @return self
     */
    public function setPostboxCity($postbox_city)
    {
        if (is_null($postbox_city)) {
            array_push($this->openAPINullablesSetToNull, 'postbox_city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postbox_city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postbox_city'] = $postbox_city;

        return $this;
    }

    /**
     * Gets postbox_state
     *
     * @return string|null
     */
    public function getPostboxState()
    {
        return $this->container['postbox_state'];
    }

    /**
     * Sets postbox_state
     *
     * @param string|null $postbox_state postbox_state
     *
     * @return self
     */
    public function setPostboxState($postbox_state)
    {
        if (is_null($postbox_state)) {
            throw new \InvalidArgumentException('non-nullable postbox_state cannot be null');
        }
        $this->container['postbox_state'] = $postbox_state;

        return $this;
    }

    /**
     * Gets postbox_country
     *
     * @return string|null
     */
    public function getPostboxCountry()
    {
        return $this->container['postbox_country'];
    }

    /**
     * Sets postbox_country
     *
     * @param string|null $postbox_country postbox_country
     *
     * @return self
     */
    public function setPostboxCountry($postbox_country)
    {
        if (is_null($postbox_country)) {
            array_push($this->openAPINullablesSetToNull, 'postbox_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postbox_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postbox_country'] = $postbox_country;

        return $this;
    }

    /**
     * Gets postbox_zip_code
     *
     * @return string|null
     */
    public function getPostboxZipCode()
    {
        return $this->container['postbox_zip_code'];
    }

    /**
     * Sets postbox_zip_code
     *
     * @param string|null $postbox_zip_code postbox_zip_code
     *
     * @return self
     */
    public function setPostboxZipCode($postbox_zip_code)
    {
        if (is_null($postbox_zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'postbox_zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('postbox_zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['postbox_zip_code'] = $postbox_zip_code;

        return $this;
    }

    /**
     * Gets sale_price_level
     *
     * @return string|null
     */
    public function getSalePriceLevel()
    {
        return $this->container['sale_price_level'];
    }

    /**
     * Sets sale_price_level
     *
     * @param string|null $sale_price_level sale_price_level
     *
     * @return self
     */
    public function setSalePriceLevel($sale_price_level)
    {
        if (is_null($sale_price_level)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price_level');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price_level', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSalePriceLevelAllowableValues();
        if (!is_null($sale_price_level) && !in_array($sale_price_level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sale_price_level', must be one of '%s'",
                    $sale_price_level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sale_price_level'] = $sale_price_level;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return int|null
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param int|null $salutation 0 = nothing, 1 = Mr, 2 = Mrs, 3 = Company, 4 = Mr & Mrs, 5 = Married couple, 6 = Family
     *
     * @return self
     */
    public function setSalutation($salutation)
    {
        if (is_null($salutation)) {
            throw new \InvalidArgumentException('non-nullable salutation cannot be null');
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets sepa_agreement
     *
     * @return string|null
     */
    public function getSepaAgreement()
    {
        return $this->container['sepa_agreement'];
    }

    /**
     * Sets sepa_agreement
     *
     * @param string|null $sepa_agreement BASIC = SEPA-Basislastschrift, COR1 = SEPA-Basislastschrift COR1 (deprecated use BASIC instead), COMPANY = SEPA-Firmenlastschrift, NULL = Noch kein Mandat erteilt
     *
     * @return self
     */
    public function setSepaAgreement($sepa_agreement)
    {
        if (is_null($sepa_agreement)) {
            array_push($this->openAPINullablesSetToNull, 'sepa_agreement');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sepa_agreement', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getSepaAgreementAllowableValues();
        if (!is_null($sepa_agreement) && !in_array($sepa_agreement, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sepa_agreement', must be one of '%s'",
                    $sepa_agreement,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sepa_agreement'] = $sepa_agreement;

        return $this;
    }

    /**
     * Gets sepa_agreement_date
     *
     * @return \DateTime|null
     */
    public function getSepaAgreementDate()
    {
        return $this->container['sepa_agreement_date'];
    }

    /**
     * Sets sepa_agreement_date
     *
     * @param \DateTime|null $sepa_agreement_date sepa_agreement_date
     *
     * @return self
     */
    public function setSepaAgreementDate($sepa_agreement_date)
    {
        if (is_null($sepa_agreement_date)) {
            array_push($this->openAPINullablesSetToNull, 'sepa_agreement_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sepa_agreement_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sepa_agreement_date'] = $sepa_agreement_date;

        return $this;
    }

    /**
     * Gets sepa_mandate_reference
     *
     * @return string|null
     */
    public function getSepaMandateReference()
    {
        return $this->container['sepa_mandate_reference'];
    }

    /**
     * Sets sepa_mandate_reference
     *
     * @param string|null $sepa_mandate_reference sepa_mandate_reference
     *
     * @return self
     */
    public function setSepaMandateReference($sepa_mandate_reference)
    {
        if (is_null($sepa_mandate_reference)) {
            array_push($this->openAPINullablesSetToNull, 'sepa_mandate_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sepa_mandate_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sepa_mandate_reference'] = $sepa_mandate_reference;

        return $this;
    }

    /**
     * Gets since_date
     *
     * @return \DateTime|null
     */
    public function getSinceDate()
    {
        return $this->container['since_date'];
    }

    /**
     * Sets since_date
     *
     * @param \DateTime|null $since_date since_date
     *
     * @return self
     */
    public function setSinceDate($since_date)
    {
        if (is_null($since_date)) {
            array_push($this->openAPINullablesSetToNull, 'since_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('since_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['since_date'] = $since_date;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            array_push($this->openAPINullablesSetToNull, 'street');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets suffix_1
     *
     * @return string|null
     */
    public function getSuffix1()
    {
        return $this->container['suffix_1'];
    }

    /**
     * Sets suffix_1
     *
     * @param string|null $suffix_1 suffix_1
     *
     * @return self
     */
    public function setSuffix1($suffix_1)
    {
        if (is_null($suffix_1)) {
            array_push($this->openAPINullablesSetToNull, 'suffix_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix_1'] = $suffix_1;

        return $this;
    }

    /**
     * Gets suffix_2
     *
     * @return string|null
     */
    public function getSuffix2()
    {
        return $this->container['suffix_2'];
    }

    /**
     * Sets suffix_2
     *
     * @param string|null $suffix_2 suffix_2
     *
     * @return self
     */
    public function setSuffix2($suffix_2)
    {
        if (is_null($suffix_2)) {
            array_push($this->openAPINullablesSetToNull, 'suffix_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('suffix_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['suffix_2'] = $suffix_2;

        return $this;
    }

    /**
     * Gets tax_number
     *
     * @return string|null
     */
    public function getTaxNumber()
    {
        return $this->container['tax_number'];
    }

    /**
     * Sets tax_number
     *
     * @param string|null $tax_number tax_number
     *
     * @return self
     */
    public function setTaxNumber($tax_number)
    {
        if (is_null($tax_number)) {
            array_push($this->openAPINullablesSetToNull, 'tax_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_number'] = $tax_number;

        return $this;
    }

    /**
     * Gets court
     *
     * @return string|null
     */
    public function getCourt()
    {
        return $this->container['court'];
    }

    /**
     * Sets court
     *
     * @param string|null $court court
     *
     * @return self
     */
    public function setCourt($court)
    {
        if (is_null($court)) {
            array_push($this->openAPINullablesSetToNull, 'court');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('court', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['court'] = $court;

        return $this;
    }

    /**
     * Gets court_registry_number
     *
     * @return string|null
     */
    public function getCourtRegistryNumber()
    {
        return $this->container['court_registry_number'];
    }

    /**
     * Sets court_registry_number
     *
     * @param string|null $court_registry_number court_registry_number
     *
     * @return self
     */
    public function setCourtRegistryNumber($court_registry_number)
    {
        if (is_null($court_registry_number)) {
            array_push($this->openAPINullablesSetToNull, 'court_registry_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('court_registry_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['court_registry_number'] = $court_registry_number;

        return $this;
    }

    /**
     * Gets tax_options
     *
     * @return string|null
     */
    public function getTaxOptions()
    {
        return $this->container['tax_options'];
    }

    /**
     * Sets tax_options
     *
     * @param string|null $tax_options nStb = Nicht steuerbar (Drittland), nStbUstID = Nicht steuerbar (EU mit USt-IdNr.), nStbNoneUstID = Nicht steuerbar (EU ohne USt-IdNr.), revc = Steuerschuldwechsel §13b (Inland), IG = Innergemeinschaftliche Lieferung, AL = Ausfuhrlieferung, sStfr = sonstige Steuerbefreiung, NULL = Umsatzsteuerpflichtig
     *
     * @return self
     */
    public function setTaxOptions($tax_options)
    {
        if (is_null($tax_options)) {
            array_push($this->openAPINullablesSetToNull, 'tax_options');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_options', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTaxOptionsAllowableValues();
        if (!is_null($tax_options) && !in_array($tax_options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tax_options', must be one of '%s'",
                    $tax_options,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_options'] = $tax_options;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets vat_identifier
     *
     * @return string|null
     */
    public function getVatIdentifier()
    {
        return $this->container['vat_identifier'];
    }

    /**
     * Sets vat_identifier
     *
     * @param string|null $vat_identifier vat_identifier
     *
     * @return self
     */
    public function setVatIdentifier($vat_identifier)
    {
        if (is_null($vat_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'vat_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vat_identifier'] = $vat_identifier;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets document_pdf_type
     *
     * @return string|null
     */
    public function getDocumentPdfType()
    {
        return $this->container['document_pdf_type'];
    }

    /**
     * Sets document_pdf_type
     *
     * @param string|null $document_pdf_type Type of PDF to use when sending a Document to the Customer.
     *
     * @return self
     */
    public function setDocumentPdfType($document_pdf_type)
    {
        if (is_null($document_pdf_type)) {
            throw new \InvalidArgumentException('non-nullable document_pdf_type cannot be null');
        }
        $allowedValues = $this->getDocumentPdfTypeAllowableValues();
        if (!in_array($document_pdf_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'document_pdf_type', must be one of '%s'",
                    $document_pdf_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_pdf_type'] = $document_pdf_type;

        return $this;
    }

    /**
     * Gets buyer_reference
     *
     * @return string|null
     */
    public function getBuyerReference()
    {
        return $this->container['buyer_reference'];
    }

    /**
     * Sets buyer_reference
     *
     * @param string|null $buyer_reference Used as \"buyerReference\" in ZUGFeRD and as \"Leitweg-ID\" in the XRechnung format.
     *
     * @return self
     */
    public function setBuyerReference($buyer_reference)
    {
        if (is_null($buyer_reference)) {
            throw new \InvalidArgumentException('non-nullable buyer_reference cannot be null');
        }
        $this->container['buyer_reference'] = $buyer_reference;

        return $this;
    }

    /**
     * Gets foreign_supplier_number
     *
     * @return string|null
     */
    public function getForeignSupplierNumber()
    {
        return $this->container['foreign_supplier_number'];
    }

    /**
     * Sets foreign_supplier_number
     *
     * @param string|null $foreign_supplier_number The ID given to your company by the customer in his system.
     *
     * @return self
     */
    public function setForeignSupplierNumber($foreign_supplier_number)
    {
        if (is_null($foreign_supplier_number)) {
            throw new \InvalidArgumentException('non-nullable foreign_supplier_number cannot be null');
        }
        $this->container['foreign_supplier_number'] = $foreign_supplier_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


