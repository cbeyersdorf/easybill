<?php
/**
 * TimeTrackingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * The version of the OpenAPI document: 1.82.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbeyersdorf\easybill\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cbeyersdorf\easybill\ApiException;
use cbeyersdorf\easybill\Configuration;
use cbeyersdorf\easybill\HeaderSelector;
use cbeyersdorf\easybill\ObjectSerializer;

/**
 * TimeTrackingApi Class Doc Comment
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TimeTrackingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'timeTrackingsGet' => [
            'application/json',
        ],
        'timeTrackingsIdDelete' => [
            'application/json',
        ],
        'timeTrackingsIdGet' => [
            'application/json',
        ],
        'timeTrackingsIdPut' => [
            'application/json',
        ],
        'timeTrackingsPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation timeTrackingsGet
     *
     * Fetch time trackings list
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $login_id Filter time-tracking by login_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $project_id Filter time-tracking by project_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $date_from_at Filter time-tracking by date_from_at. You can filter one date with date_from_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_from_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $date_thru_at Filter time-tracking by date_thru_at. You can filter one date with date_thru_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_thru_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsGet'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbeyersdorf\easybill\Model\TimeTrackings
     */
    public function timeTrackingsGet($limit = null, $page = null, $login_id = null, $project_id = null, $date_from_at = null, $date_thru_at = null, string $contentType = self::contentTypes['timeTrackingsGet'][0])
    {
        list($response) = $this->timeTrackingsGetWithHttpInfo($limit, $page, $login_id, $project_id, $date_from_at, $date_thru_at, $contentType);
        return $response;
    }

    /**
     * Operation timeTrackingsGetWithHttpInfo
     *
     * Fetch time trackings list
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $login_id Filter time-tracking by login_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $project_id Filter time-tracking by project_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $date_from_at Filter time-tracking by date_from_at. You can filter one date with date_from_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_from_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $date_thru_at Filter time-tracking by date_thru_at. You can filter one date with date_thru_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_thru_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsGet'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbeyersdorf\easybill\Model\TimeTrackings, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeTrackingsGetWithHttpInfo($limit = null, $page = null, $login_id = null, $project_id = null, $date_from_at = null, $date_thru_at = null, string $contentType = self::contentTypes['timeTrackingsGet'][0])
    {
        $request = $this->timeTrackingsGetRequest($limit, $page, $login_id, $project_id, $date_from_at, $date_thru_at, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cbeyersdorf\easybill\Model\TimeTrackings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\cbeyersdorf\easybill\Model\TimeTrackings' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cbeyersdorf\easybill\Model\TimeTrackings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cbeyersdorf\easybill\Model\TimeTrackings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbeyersdorf\easybill\Model\TimeTrackings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeTrackingsGetAsync
     *
     * Fetch time trackings list
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $login_id Filter time-tracking by login_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $project_id Filter time-tracking by project_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $date_from_at Filter time-tracking by date_from_at. You can filter one date with date_from_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_from_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $date_thru_at Filter time-tracking by date_thru_at. You can filter one date with date_thru_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_thru_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsGetAsync($limit = null, $page = null, $login_id = null, $project_id = null, $date_from_at = null, $date_thru_at = null, string $contentType = self::contentTypes['timeTrackingsGet'][0])
    {
        return $this->timeTrackingsGetAsyncWithHttpInfo($limit, $page, $login_id, $project_id, $date_from_at, $date_thru_at, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeTrackingsGetAsyncWithHttpInfo
     *
     * Fetch time trackings list
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $login_id Filter time-tracking by login_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $project_id Filter time-tracking by project_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $date_from_at Filter time-tracking by date_from_at. You can filter one date with date_from_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_from_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $date_thru_at Filter time-tracking by date_thru_at. You can filter one date with date_thru_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_thru_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsGetAsyncWithHttpInfo($limit = null, $page = null, $login_id = null, $project_id = null, $date_from_at = null, $date_thru_at = null, string $contentType = self::contentTypes['timeTrackingsGet'][0])
    {
        $returnType = '\cbeyersdorf\easybill\Model\TimeTrackings';
        $request = $this->timeTrackingsGetRequest($limit, $page, $login_id, $project_id, $date_from_at, $date_thru_at, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeTrackingsGet'
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $login_id Filter time-tracking by login_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $project_id Filter time-tracking by project_id. You can add multiple ids separate by comma like id,id,id. (optional)
     * @param  string $date_from_at Filter time-tracking by date_from_at. You can filter one date with date_from_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_from_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $date_thru_at Filter time-tracking by date_thru_at. You can filter one date with date_thru_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. You can also specify a specific time with date_thru_at&#x3D;2014-12-10 12:30:00 or between like 2015-01-01 12:30:00,2015-01-01 13:00:00. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeTrackingsGetRequest($limit = null, $page = null, $login_id = null, $project_id = null, $date_from_at = null, $date_thru_at = null, string $contentType = self::contentTypes['timeTrackingsGet'][0])
    {

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TimeTrackingApi.timeTrackingsGet, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TimeTrackingApi.timeTrackingsGet, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling TimeTrackingApi.timeTrackingsGet, must be bigger than or equal to 1.');
        }
        





        $resourcePath = '/time-trackings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $login_id,
            'login_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $project_id,
            'project_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_from_at,
            'date_from_at', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_thru_at,
            'date_thru_at', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeTrackingsIdDelete
     *
     * Delete time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdDelete'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function timeTrackingsIdDelete($id, string $contentType = self::contentTypes['timeTrackingsIdDelete'][0])
    {
        $this->timeTrackingsIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation timeTrackingsIdDeleteWithHttpInfo
     *
     * Delete time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdDelete'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeTrackingsIdDeleteWithHttpInfo($id, string $contentType = self::contentTypes['timeTrackingsIdDelete'][0])
    {
        $request = $this->timeTrackingsIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation timeTrackingsIdDeleteAsync
     *
     * Delete time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsIdDeleteAsync($id, string $contentType = self::contentTypes['timeTrackingsIdDelete'][0])
    {
        return $this->timeTrackingsIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeTrackingsIdDeleteAsyncWithHttpInfo
     *
     * Delete time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsIdDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['timeTrackingsIdDelete'][0])
    {
        $returnType = '';
        $request = $this->timeTrackingsIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeTrackingsIdDelete'
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeTrackingsIdDeleteRequest($id, string $contentType = self::contentTypes['timeTrackingsIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling timeTrackingsIdDelete'
            );
        }


        $resourcePath = '/time-trackings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeTrackingsIdGet
     *
     * Fetch time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdGet'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbeyersdorf\easybill\Model\TimeTracking
     */
    public function timeTrackingsIdGet($id, string $contentType = self::contentTypes['timeTrackingsIdGet'][0])
    {
        list($response) = $this->timeTrackingsIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation timeTrackingsIdGetWithHttpInfo
     *
     * Fetch time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdGet'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbeyersdorf\easybill\Model\TimeTracking, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeTrackingsIdGetWithHttpInfo($id, string $contentType = self::contentTypes['timeTrackingsIdGet'][0])
    {
        $request = $this->timeTrackingsIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cbeyersdorf\easybill\Model\TimeTracking' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\cbeyersdorf\easybill\Model\TimeTracking' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cbeyersdorf\easybill\Model\TimeTracking', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cbeyersdorf\easybill\Model\TimeTracking';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbeyersdorf\easybill\Model\TimeTracking',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeTrackingsIdGetAsync
     *
     * Fetch time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsIdGetAsync($id, string $contentType = self::contentTypes['timeTrackingsIdGet'][0])
    {
        return $this->timeTrackingsIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeTrackingsIdGetAsyncWithHttpInfo
     *
     * Fetch time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['timeTrackingsIdGet'][0])
    {
        $returnType = '\cbeyersdorf\easybill\Model\TimeTracking';
        $request = $this->timeTrackingsIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeTrackingsIdGet'
     *
     * @param  int $id ID of time tracking (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeTrackingsIdGetRequest($id, string $contentType = self::contentTypes['timeTrackingsIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling timeTrackingsIdGet'
            );
        }


        $resourcePath = '/time-trackings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeTrackingsIdPut
     *
     * Update time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdPut'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbeyersdorf\easybill\Model\TimeTracking
     */
    public function timeTrackingsIdPut($id, $body, string $contentType = self::contentTypes['timeTrackingsIdPut'][0])
    {
        list($response) = $this->timeTrackingsIdPutWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation timeTrackingsIdPutWithHttpInfo
     *
     * Update time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdPut'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbeyersdorf\easybill\Model\TimeTracking, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeTrackingsIdPutWithHttpInfo($id, $body, string $contentType = self::contentTypes['timeTrackingsIdPut'][0])
    {
        $request = $this->timeTrackingsIdPutRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cbeyersdorf\easybill\Model\TimeTracking' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\cbeyersdorf\easybill\Model\TimeTracking' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cbeyersdorf\easybill\Model\TimeTracking', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cbeyersdorf\easybill\Model\TimeTracking';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbeyersdorf\easybill\Model\TimeTracking',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeTrackingsIdPutAsync
     *
     * Update time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsIdPutAsync($id, $body, string $contentType = self::contentTypes['timeTrackingsIdPut'][0])
    {
        return $this->timeTrackingsIdPutAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeTrackingsIdPutAsyncWithHttpInfo
     *
     * Update time tracking
     *
     * @param  int $id ID of time tracking (required)
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsIdPutAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['timeTrackingsIdPut'][0])
    {
        $returnType = '\cbeyersdorf\easybill\Model\TimeTracking';
        $request = $this->timeTrackingsIdPutRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeTrackingsIdPut'
     *
     * @param  int $id ID of time tracking (required)
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeTrackingsIdPutRequest($id, $body, string $contentType = self::contentTypes['timeTrackingsIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling timeTrackingsIdPut'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling timeTrackingsIdPut'
            );
        }


        $resourcePath = '/time-trackings/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation timeTrackingsPost
     *
     * Create time tracking
     *
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsPost'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbeyersdorf\easybill\Model\TimeTracking
     */
    public function timeTrackingsPost($body, string $contentType = self::contentTypes['timeTrackingsPost'][0])
    {
        list($response) = $this->timeTrackingsPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation timeTrackingsPostWithHttpInfo
     *
     * Create time tracking
     *
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsPost'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbeyersdorf\easybill\Model\TimeTracking, HTTP status code, HTTP response headers (array of strings)
     */
    public function timeTrackingsPostWithHttpInfo($body, string $contentType = self::contentTypes['timeTrackingsPost'][0])
    {
        $request = $this->timeTrackingsPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\cbeyersdorf\easybill\Model\TimeTracking' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\cbeyersdorf\easybill\Model\TimeTracking' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cbeyersdorf\easybill\Model\TimeTracking', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cbeyersdorf\easybill\Model\TimeTracking';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbeyersdorf\easybill\Model\TimeTracking',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation timeTrackingsPostAsync
     *
     * Create time tracking
     *
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsPostAsync($body, string $contentType = self::contentTypes['timeTrackingsPost'][0])
    {
        return $this->timeTrackingsPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation timeTrackingsPostAsyncWithHttpInfo
     *
     * Create time tracking
     *
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function timeTrackingsPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['timeTrackingsPost'][0])
    {
        $returnType = '\cbeyersdorf\easybill\Model\TimeTracking';
        $request = $this->timeTrackingsPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'timeTrackingsPost'
     *
     * @param  \cbeyersdorf\easybill\Model\TimeTracking $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['timeTrackingsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function timeTrackingsPostRequest($body, string $contentType = self::contentTypes['timeTrackingsPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling timeTrackingsPost'
            );
        }


        $resourcePath = '/time-trackings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
