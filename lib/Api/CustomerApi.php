<?php
/**
 * CustomerApi
 * PHP version 7.4
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * The version of the OpenAPI document: 1.78.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbeyersdorf\easybill\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use cbeyersdorf\easybill\ApiException;
use cbeyersdorf\easybill\Configuration;
use cbeyersdorf\easybill\HeaderSelector;
use cbeyersdorf\easybill\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CustomerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'customersGet' => [
            'application/json',
        ],
        'customersIdDelete' => [
            'application/json',
        ],
        'customersIdGet' => [
            'application/json',
        ],
        'customersIdPut' => [
            'application/json',
        ],
        'customersPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customersGet
     *
     * Fetch customers list
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $group_id Filter customers by group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $additional_group_id Filter customers by additional_group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $number Filter customers by number. You can add multiple numbers separate by comma like no,no,no. (optional)
     * @param  string $country Filter customers by country. You can add multiple countries separate by comma like DE,PL,FR. (optional)
     * @param  string $zip_code Filter customers by zip_code. You can add multiple zip codes separate by comma like zip,zip,zip. (optional)
     * @param  string $emails Filter customers by emails. You can add multiple emails separate by comma like mail,mail,mail. (optional)
     * @param  string $first_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $last_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $company_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $created_at Filter customers by created_at. You can filter one date with created_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbeyersdorf\easybill\Model\Customers
     */
    public function customersGet($limit = null, $page = null, $group_id = null, $additional_group_id = null, $number = null, $country = null, $zip_code = null, $emails = null, $first_name = null, $last_name = null, $company_name = null, $created_at = null, string $contentType = self::contentTypes['customersGet'][0])
    {
        list($response) = $this->customersGetWithHttpInfo($limit, $page, $group_id, $additional_group_id, $number, $country, $zip_code, $emails, $first_name, $last_name, $company_name, $created_at, $contentType);
        return $response;
    }

    /**
     * Operation customersGetWithHttpInfo
     *
     * Fetch customers list
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $group_id Filter customers by group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $additional_group_id Filter customers by additional_group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $number Filter customers by number. You can add multiple numbers separate by comma like no,no,no. (optional)
     * @param  string $country Filter customers by country. You can add multiple countries separate by comma like DE,PL,FR. (optional)
     * @param  string $zip_code Filter customers by zip_code. You can add multiple zip codes separate by comma like zip,zip,zip. (optional)
     * @param  string $emails Filter customers by emails. You can add multiple emails separate by comma like mail,mail,mail. (optional)
     * @param  string $first_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $last_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $company_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $created_at Filter customers by created_at. You can filter one date with created_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbeyersdorf\easybill\Model\Customers, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersGetWithHttpInfo($limit = null, $page = null, $group_id = null, $additional_group_id = null, $number = null, $country = null, $zip_code = null, $emails = null, $first_name = null, $last_name = null, $company_name = null, $created_at = null, string $contentType = self::contentTypes['customersGet'][0])
    {
        $request = $this->customersGetRequest($limit, $page, $group_id, $additional_group_id, $number, $country, $zip_code, $emails, $first_name, $last_name, $company_name, $created_at, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cbeyersdorf\easybill\Model\Customers' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\cbeyersdorf\easybill\Model\Customers' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cbeyersdorf\easybill\Model\Customers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cbeyersdorf\easybill\Model\Customers';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbeyersdorf\easybill\Model\Customers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersGetAsync
     *
     * Fetch customers list
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $group_id Filter customers by group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $additional_group_id Filter customers by additional_group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $number Filter customers by number. You can add multiple numbers separate by comma like no,no,no. (optional)
     * @param  string $country Filter customers by country. You can add multiple countries separate by comma like DE,PL,FR. (optional)
     * @param  string $zip_code Filter customers by zip_code. You can add multiple zip codes separate by comma like zip,zip,zip. (optional)
     * @param  string $emails Filter customers by emails. You can add multiple emails separate by comma like mail,mail,mail. (optional)
     * @param  string $first_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $last_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $company_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $created_at Filter customers by created_at. You can filter one date with created_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersGetAsync($limit = null, $page = null, $group_id = null, $additional_group_id = null, $number = null, $country = null, $zip_code = null, $emails = null, $first_name = null, $last_name = null, $company_name = null, $created_at = null, string $contentType = self::contentTypes['customersGet'][0])
    {
        return $this->customersGetAsyncWithHttpInfo($limit, $page, $group_id, $additional_group_id, $number, $country, $zip_code, $emails, $first_name, $last_name, $company_name, $created_at, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersGetAsyncWithHttpInfo
     *
     * Fetch customers list
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $group_id Filter customers by group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $additional_group_id Filter customers by additional_group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $number Filter customers by number. You can add multiple numbers separate by comma like no,no,no. (optional)
     * @param  string $country Filter customers by country. You can add multiple countries separate by comma like DE,PL,FR. (optional)
     * @param  string $zip_code Filter customers by zip_code. You can add multiple zip codes separate by comma like zip,zip,zip. (optional)
     * @param  string $emails Filter customers by emails. You can add multiple emails separate by comma like mail,mail,mail. (optional)
     * @param  string $first_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $last_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $company_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $created_at Filter customers by created_at. You can filter one date with created_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersGetAsyncWithHttpInfo($limit = null, $page = null, $group_id = null, $additional_group_id = null, $number = null, $country = null, $zip_code = null, $emails = null, $first_name = null, $last_name = null, $company_name = null, $created_at = null, string $contentType = self::contentTypes['customersGet'][0])
    {
        $returnType = '\cbeyersdorf\easybill\Model\Customers';
        $request = $this->customersGetRequest($limit, $page, $group_id, $additional_group_id, $number, $country, $zip_code, $emails, $first_name, $last_name, $company_name, $created_at, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersGet'
     *
     * @param  int $limit Limited the result. Default is 100. Maximum can be 1000. (optional)
     * @param  int $page Set current Page. Default is 1. (optional)
     * @param  string $group_id Filter customers by group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $additional_group_id Filter customers by additional_group_id. You can add multiple group ids separate by comma like id,id,id. (optional)
     * @param  string $number Filter customers by number. You can add multiple numbers separate by comma like no,no,no. (optional)
     * @param  string $country Filter customers by country. You can add multiple countries separate by comma like DE,PL,FR. (optional)
     * @param  string $zip_code Filter customers by zip_code. You can add multiple zip codes separate by comma like zip,zip,zip. (optional)
     * @param  string $emails Filter customers by emails. You can add multiple emails separate by comma like mail,mail,mail. (optional)
     * @param  string $first_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $last_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $company_name Filter customers by first_name. You can add multiple names separate by comma like name,name,name. (optional)
     * @param  string $created_at Filter customers by created_at. You can filter one date with created_at&#x3D;2014-12-10 or between like 2015-01-01,2015-12-31. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersGetRequest($limit = null, $page = null, $group_id = null, $additional_group_id = null, $number = null, $country = null, $zip_code = null, $emails = null, $first_name = null, $last_name = null, $company_name = null, $created_at = null, string $contentType = self::contentTypes['customersGet'][0])
    {

        if ($limit !== null && $limit > 1000) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerApi.customersGet, must be smaller than or equal to 1000.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling CustomerApi.customersGet, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling CustomerApi.customersGet, must be bigger than or equal to 1.');
        }
        











        $resourcePath = '/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group_id,
            'group_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $additional_group_id,
            'additional_group_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $zip_code,
            'zip_code', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $emails,
            'emails', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $first_name,
            'first_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $last_name,
            'last_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $company_name,
            'company_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $created_at,
            'created_at', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersIdDelete
     *
     * Delete customer
     *
     * @param  int $id ID of customer that needs to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdDelete'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function customersIdDelete($id, string $contentType = self::contentTypes['customersIdDelete'][0])
    {
        $this->customersIdDeleteWithHttpInfo($id, $contentType);
    }

    /**
     * Operation customersIdDeleteWithHttpInfo
     *
     * Delete customer
     *
     * @param  int $id ID of customer that needs to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdDelete'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersIdDeleteWithHttpInfo($id, string $contentType = self::contentTypes['customersIdDelete'][0])
    {
        $request = $this->customersIdDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation customersIdDeleteAsync
     *
     * Delete customer
     *
     * @param  int $id ID of customer that needs to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersIdDeleteAsync($id, string $contentType = self::contentTypes['customersIdDelete'][0])
    {
        return $this->customersIdDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersIdDeleteAsyncWithHttpInfo
     *
     * Delete customer
     *
     * @param  int $id ID of customer that needs to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersIdDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['customersIdDelete'][0])
    {
        $returnType = '';
        $request = $this->customersIdDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersIdDelete'
     *
     * @param  int $id ID of customer that needs to be deleted (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersIdDeleteRequest($id, string $contentType = self::contentTypes['customersIdDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customersIdDelete'
            );
        }


        $resourcePath = '/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersIdGet
     *
     * Fetch customer
     *
     * @param  int $id ID of customer that needs to be fetched (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdGet'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbeyersdorf\easybill\Model\Customer
     */
    public function customersIdGet($id, string $contentType = self::contentTypes['customersIdGet'][0])
    {
        list($response) = $this->customersIdGetWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation customersIdGetWithHttpInfo
     *
     * Fetch customer
     *
     * @param  int $id ID of customer that needs to be fetched (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdGet'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbeyersdorf\easybill\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersIdGetWithHttpInfo($id, string $contentType = self::contentTypes['customersIdGet'][0])
    {
        $request = $this->customersIdGetRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cbeyersdorf\easybill\Model\Customer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\cbeyersdorf\easybill\Model\Customer' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cbeyersdorf\easybill\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cbeyersdorf\easybill\Model\Customer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbeyersdorf\easybill\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersIdGetAsync
     *
     * Fetch customer
     *
     * @param  int $id ID of customer that needs to be fetched (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersIdGetAsync($id, string $contentType = self::contentTypes['customersIdGet'][0])
    {
        return $this->customersIdGetAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersIdGetAsyncWithHttpInfo
     *
     * Fetch customer
     *
     * @param  int $id ID of customer that needs to be fetched (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersIdGetAsyncWithHttpInfo($id, string $contentType = self::contentTypes['customersIdGet'][0])
    {
        $returnType = '\cbeyersdorf\easybill\Model\Customer';
        $request = $this->customersIdGetRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersIdGet'
     *
     * @param  int $id ID of customer that needs to be fetched (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersIdGetRequest($id, string $contentType = self::contentTypes['customersIdGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customersIdGet'
            );
        }


        $resourcePath = '/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersIdPut
     *
     * Update Customer
     *
     * @param  int $id ID of customer that needs to be updated (required)
     * @param  \cbeyersdorf\easybill\Model\Customer $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdPut'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbeyersdorf\easybill\Model\Customer
     */
    public function customersIdPut($id, $body, string $contentType = self::contentTypes['customersIdPut'][0])
    {
        list($response) = $this->customersIdPutWithHttpInfo($id, $body, $contentType);
        return $response;
    }

    /**
     * Operation customersIdPutWithHttpInfo
     *
     * Update Customer
     *
     * @param  int $id ID of customer that needs to be updated (required)
     * @param  \cbeyersdorf\easybill\Model\Customer $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdPut'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbeyersdorf\easybill\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersIdPutWithHttpInfo($id, $body, string $contentType = self::contentTypes['customersIdPut'][0])
    {
        $request = $this->customersIdPutRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\cbeyersdorf\easybill\Model\Customer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\cbeyersdorf\easybill\Model\Customer' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cbeyersdorf\easybill\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cbeyersdorf\easybill\Model\Customer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbeyersdorf\easybill\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersIdPutAsync
     *
     * Update Customer
     *
     * @param  int $id ID of customer that needs to be updated (required)
     * @param  \cbeyersdorf\easybill\Model\Customer $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersIdPutAsync($id, $body, string $contentType = self::contentTypes['customersIdPut'][0])
    {
        return $this->customersIdPutAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersIdPutAsyncWithHttpInfo
     *
     * Update Customer
     *
     * @param  int $id ID of customer that needs to be updated (required)
     * @param  \cbeyersdorf\easybill\Model\Customer $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersIdPutAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['customersIdPut'][0])
    {
        $returnType = '\cbeyersdorf\easybill\Model\Customer';
        $request = $this->customersIdPutRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersIdPut'
     *
     * @param  int $id ID of customer that needs to be updated (required)
     * @param  \cbeyersdorf\easybill\Model\Customer $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersIdPutRequest($id, $body, string $contentType = self::contentTypes['customersIdPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customersIdPut'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling customersIdPut'
            );
        }


        $resourcePath = '/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customersPost
     *
     * Create customer
     *
     * @param  \cbeyersdorf\easybill\Model\Customer $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersPost'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \cbeyersdorf\easybill\Model\Customer
     */
    public function customersPost($body, string $contentType = self::contentTypes['customersPost'][0])
    {
        list($response) = $this->customersPostWithHttpInfo($body, $contentType);
        return $response;
    }

    /**
     * Operation customersPostWithHttpInfo
     *
     * Create customer
     *
     * @param  \cbeyersdorf\easybill\Model\Customer $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersPost'] to see the possible values for this operation
     *
     * @throws \cbeyersdorf\easybill\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \cbeyersdorf\easybill\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function customersPostWithHttpInfo($body, string $contentType = self::contentTypes['customersPost'][0])
    {
        $request = $this->customersPostRequest($body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\cbeyersdorf\easybill\Model\Customer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\cbeyersdorf\easybill\Model\Customer' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\cbeyersdorf\easybill\Model\Customer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\cbeyersdorf\easybill\Model\Customer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\cbeyersdorf\easybill\Model\Customer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customersPostAsync
     *
     * Create customer
     *
     * @param  \cbeyersdorf\easybill\Model\Customer $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersPostAsync($body, string $contentType = self::contentTypes['customersPost'][0])
    {
        return $this->customersPostAsyncWithHttpInfo($body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation customersPostAsyncWithHttpInfo
     *
     * Create customer
     *
     * @param  \cbeyersdorf\easybill\Model\Customer $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customersPostAsyncWithHttpInfo($body, string $contentType = self::contentTypes['customersPost'][0])
    {
        $returnType = '\cbeyersdorf\easybill\Model\Customer';
        $request = $this->customersPostRequest($body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'customersPost'
     *
     * @param  \cbeyersdorf\easybill\Model\Customer $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customersPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customersPostRequest($body, string $contentType = self::contentTypes['customersPost'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling customersPost'
            );
        }


        $resourcePath = '/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
