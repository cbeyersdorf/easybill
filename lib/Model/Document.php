<?php
/**
 * Document
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * The version of the OpenAPI document: 1.87.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbeyersdorf\easybill\Model;

use \ArrayAccess;
use \cbeyersdorf\easybill\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Document implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address' => '\cbeyersdorf\easybill\Model\DocumentAddress',
        'attachment_ids' => 'int[]',
        'label_address' => '\cbeyersdorf\easybill\Model\DocumentAddress',
        'amount' => 'int',
        'amount_net' => 'int',
        'bank_debit_form' => 'string',
        'billing_country' => 'string',
        'calc_vat_from' => 'int',
        'cancel_id' => 'int',
        'cash_allowance' => 'float',
        'cash_allowance_days' => 'int',
        'cash_allowance_text' => 'string',
        'contact_id' => 'int',
        'contact_label' => 'string',
        'contact_text' => 'string',
        'created_at' => '\DateTime',
        'currency' => 'string',
        'customer_id' => 'int',
        'customer_snapshot' => '\cbeyersdorf\easybill\Model\CustomerSnapshot',
        'discount' => 'string',
        'discount_type' => 'string',
        'document_date' => '\DateTime',
        'due_date' => '\DateTime',
        'edited_at' => '\DateTime',
        'external_id' => 'string',
        'replica_url' => 'string',
        'grace_period' => 'int',
        'due_in_days' => 'int',
        'id' => 'int',
        'is_acceptable_on_public_domain' => 'bool',
        'is_archive' => 'bool',
        'is_draft' => 'bool',
        'is_replica' => 'bool',
        'is_oss' => 'bool',
        'item_notes' => 'string[]',
        'items' => '\cbeyersdorf\easybill\Model\DocumentPosition[]',
        'last_postbox_id' => 'int',
        'login_id' => 'int',
        'number' => 'string',
        'order_number' => 'string',
        'buyer_reference' => 'string',
        'paid_amount' => 'int',
        'paid_at' => '\DateTime',
        'pdf_pages' => 'int',
        'pdf_template' => 'string',
        'project_id' => 'int',
        'recurring_options' => '\cbeyersdorf\easybill\Model\DocumentRecurring',
        'ref_id' => 'int',
        'root_id' => 'int',
        'service_date' => '\cbeyersdorf\easybill\Model\ServiceDate',
        'shipping_country' => 'string',
        'status' => 'string',
        'text' => 'string',
        'text_prefix' => 'string',
        'text_tax' => 'string',
        'title' => 'string',
        'type' => 'string',
        'use_shipping_address' => 'bool',
        'vat_country' => 'string',
        'vat_id' => 'string',
        'fulfillment_country' => 'string',
        'vat_option' => 'string',
        'file_format_config' => '\cbeyersdorf\easybill\Model\FileFormatConfig[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address' => null,
        'attachment_ids' => null,
        'label_address' => null,
        'amount' => null,
        'amount_net' => null,
        'bank_debit_form' => null,
        'billing_country' => null,
        'calc_vat_from' => null,
        'cancel_id' => 'int64',
        'cash_allowance' => 'float',
        'cash_allowance_days' => null,
        'cash_allowance_text' => null,
        'contact_id' => 'int64',
        'contact_label' => null,
        'contact_text' => null,
        'created_at' => 'date-time',
        'currency' => null,
        'customer_id' => 'int64',
        'customer_snapshot' => null,
        'discount' => null,
        'discount_type' => null,
        'document_date' => 'date',
        'due_date' => 'date',
        'edited_at' => 'date-time',
        'external_id' => null,
        'replica_url' => null,
        'grace_period' => null,
        'due_in_days' => null,
        'id' => 'int64',
        'is_acceptable_on_public_domain' => null,
        'is_archive' => null,
        'is_draft' => null,
        'is_replica' => null,
        'is_oss' => null,
        'item_notes' => null,
        'items' => null,
        'last_postbox_id' => 'int64',
        'login_id' => 'int64',
        'number' => null,
        'order_number' => null,
        'buyer_reference' => null,
        'paid_amount' => null,
        'paid_at' => 'date',
        'pdf_pages' => null,
        'pdf_template' => null,
        'project_id' => null,
        'recurring_options' => null,
        'ref_id' => 'int64',
        'root_id' => 'int64',
        'service_date' => null,
        'shipping_country' => null,
        'status' => null,
        'text' => null,
        'text_prefix' => null,
        'text_tax' => null,
        'title' => null,
        'type' => null,
        'use_shipping_address' => null,
        'vat_country' => null,
        'vat_id' => null,
        'fulfillment_country' => null,
        'vat_option' => null,
        'file_format_config' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address' => false,
        'attachment_ids' => false,
        'label_address' => false,
        'amount' => false,
        'amount_net' => false,
        'bank_debit_form' => true,
        'billing_country' => false,
        'calc_vat_from' => false,
        'cancel_id' => false,
        'cash_allowance' => true,
        'cash_allowance_days' => true,
        'cash_allowance_text' => true,
        'contact_id' => true,
        'contact_label' => false,
        'contact_text' => false,
        'created_at' => false,
        'currency' => false,
        'customer_id' => true,
        'customer_snapshot' => false,
        'discount' => true,
        'discount_type' => true,
        'document_date' => false,
        'due_date' => false,
        'edited_at' => false,
        'external_id' => true,
        'replica_url' => true,
        'grace_period' => true,
        'due_in_days' => true,
        'id' => false,
        'is_acceptable_on_public_domain' => false,
        'is_archive' => false,
        'is_draft' => false,
        'is_replica' => false,
        'is_oss' => false,
        'item_notes' => false,
        'items' => false,
        'last_postbox_id' => false,
        'login_id' => false,
        'number' => true,
        'order_number' => false,
        'buyer_reference' => false,
        'paid_amount' => false,
        'paid_at' => false,
        'pdf_pages' => false,
        'pdf_template' => false,
        'project_id' => true,
        'recurring_options' => false,
        'ref_id' => true,
        'root_id' => true,
        'service_date' => false,
        'shipping_country' => true,
        'status' => true,
        'text' => false,
        'text_prefix' => false,
        'text_tax' => true,
        'title' => true,
        'type' => false,
        'use_shipping_address' => false,
        'vat_country' => true,
        'vat_id' => false,
        'fulfillment_country' => true,
        'vat_option' => true,
        'file_format_config' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'attachment_ids' => 'attachment_ids',
        'label_address' => 'label_address',
        'amount' => 'amount',
        'amount_net' => 'amount_net',
        'bank_debit_form' => 'bank_debit_form',
        'billing_country' => 'billing_country',
        'calc_vat_from' => 'calc_vat_from',
        'cancel_id' => 'cancel_id',
        'cash_allowance' => 'cash_allowance',
        'cash_allowance_days' => 'cash_allowance_days',
        'cash_allowance_text' => 'cash_allowance_text',
        'contact_id' => 'contact_id',
        'contact_label' => 'contact_label',
        'contact_text' => 'contact_text',
        'created_at' => 'created_at',
        'currency' => 'currency',
        'customer_id' => 'customer_id',
        'customer_snapshot' => 'customer_snapshot',
        'discount' => 'discount',
        'discount_type' => 'discount_type',
        'document_date' => 'document_date',
        'due_date' => 'due_date',
        'edited_at' => 'edited_at',
        'external_id' => 'external_id',
        'replica_url' => 'replica_url',
        'grace_period' => 'grace_period',
        'due_in_days' => 'due_in_days',
        'id' => 'id',
        'is_acceptable_on_public_domain' => 'is_acceptable_on_public_domain',
        'is_archive' => 'is_archive',
        'is_draft' => 'is_draft',
        'is_replica' => 'is_replica',
        'is_oss' => 'is_oss',
        'item_notes' => 'item_notes',
        'items' => 'items',
        'last_postbox_id' => 'last_postbox_id',
        'login_id' => 'login_id',
        'number' => 'number',
        'order_number' => 'order_number',
        'buyer_reference' => 'buyer_reference',
        'paid_amount' => 'paid_amount',
        'paid_at' => 'paid_at',
        'pdf_pages' => 'pdf_pages',
        'pdf_template' => 'pdf_template',
        'project_id' => 'project_id',
        'recurring_options' => 'recurring_options',
        'ref_id' => 'ref_id',
        'root_id' => 'root_id',
        'service_date' => 'service_date',
        'shipping_country' => 'shipping_country',
        'status' => 'status',
        'text' => 'text',
        'text_prefix' => 'text_prefix',
        'text_tax' => 'text_tax',
        'title' => 'title',
        'type' => 'type',
        'use_shipping_address' => 'use_shipping_address',
        'vat_country' => 'vat_country',
        'vat_id' => 'vat_id',
        'fulfillment_country' => 'fulfillment_country',
        'vat_option' => 'vat_option',
        'file_format_config' => 'file_format_config'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'attachment_ids' => 'setAttachmentIds',
        'label_address' => 'setLabelAddress',
        'amount' => 'setAmount',
        'amount_net' => 'setAmountNet',
        'bank_debit_form' => 'setBankDebitForm',
        'billing_country' => 'setBillingCountry',
        'calc_vat_from' => 'setCalcVatFrom',
        'cancel_id' => 'setCancelId',
        'cash_allowance' => 'setCashAllowance',
        'cash_allowance_days' => 'setCashAllowanceDays',
        'cash_allowance_text' => 'setCashAllowanceText',
        'contact_id' => 'setContactId',
        'contact_label' => 'setContactLabel',
        'contact_text' => 'setContactText',
        'created_at' => 'setCreatedAt',
        'currency' => 'setCurrency',
        'customer_id' => 'setCustomerId',
        'customer_snapshot' => 'setCustomerSnapshot',
        'discount' => 'setDiscount',
        'discount_type' => 'setDiscountType',
        'document_date' => 'setDocumentDate',
        'due_date' => 'setDueDate',
        'edited_at' => 'setEditedAt',
        'external_id' => 'setExternalId',
        'replica_url' => 'setReplicaUrl',
        'grace_period' => 'setGracePeriod',
        'due_in_days' => 'setDueInDays',
        'id' => 'setId',
        'is_acceptable_on_public_domain' => 'setIsAcceptableOnPublicDomain',
        'is_archive' => 'setIsArchive',
        'is_draft' => 'setIsDraft',
        'is_replica' => 'setIsReplica',
        'is_oss' => 'setIsOss',
        'item_notes' => 'setItemNotes',
        'items' => 'setItems',
        'last_postbox_id' => 'setLastPostboxId',
        'login_id' => 'setLoginId',
        'number' => 'setNumber',
        'order_number' => 'setOrderNumber',
        'buyer_reference' => 'setBuyerReference',
        'paid_amount' => 'setPaidAmount',
        'paid_at' => 'setPaidAt',
        'pdf_pages' => 'setPdfPages',
        'pdf_template' => 'setPdfTemplate',
        'project_id' => 'setProjectId',
        'recurring_options' => 'setRecurringOptions',
        'ref_id' => 'setRefId',
        'root_id' => 'setRootId',
        'service_date' => 'setServiceDate',
        'shipping_country' => 'setShippingCountry',
        'status' => 'setStatus',
        'text' => 'setText',
        'text_prefix' => 'setTextPrefix',
        'text_tax' => 'setTextTax',
        'title' => 'setTitle',
        'type' => 'setType',
        'use_shipping_address' => 'setUseShippingAddress',
        'vat_country' => 'setVatCountry',
        'vat_id' => 'setVatId',
        'fulfillment_country' => 'setFulfillmentCountry',
        'vat_option' => 'setVatOption',
        'file_format_config' => 'setFileFormatConfig'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'attachment_ids' => 'getAttachmentIds',
        'label_address' => 'getLabelAddress',
        'amount' => 'getAmount',
        'amount_net' => 'getAmountNet',
        'bank_debit_form' => 'getBankDebitForm',
        'billing_country' => 'getBillingCountry',
        'calc_vat_from' => 'getCalcVatFrom',
        'cancel_id' => 'getCancelId',
        'cash_allowance' => 'getCashAllowance',
        'cash_allowance_days' => 'getCashAllowanceDays',
        'cash_allowance_text' => 'getCashAllowanceText',
        'contact_id' => 'getContactId',
        'contact_label' => 'getContactLabel',
        'contact_text' => 'getContactText',
        'created_at' => 'getCreatedAt',
        'currency' => 'getCurrency',
        'customer_id' => 'getCustomerId',
        'customer_snapshot' => 'getCustomerSnapshot',
        'discount' => 'getDiscount',
        'discount_type' => 'getDiscountType',
        'document_date' => 'getDocumentDate',
        'due_date' => 'getDueDate',
        'edited_at' => 'getEditedAt',
        'external_id' => 'getExternalId',
        'replica_url' => 'getReplicaUrl',
        'grace_period' => 'getGracePeriod',
        'due_in_days' => 'getDueInDays',
        'id' => 'getId',
        'is_acceptable_on_public_domain' => 'getIsAcceptableOnPublicDomain',
        'is_archive' => 'getIsArchive',
        'is_draft' => 'getIsDraft',
        'is_replica' => 'getIsReplica',
        'is_oss' => 'getIsOss',
        'item_notes' => 'getItemNotes',
        'items' => 'getItems',
        'last_postbox_id' => 'getLastPostboxId',
        'login_id' => 'getLoginId',
        'number' => 'getNumber',
        'order_number' => 'getOrderNumber',
        'buyer_reference' => 'getBuyerReference',
        'paid_amount' => 'getPaidAmount',
        'paid_at' => 'getPaidAt',
        'pdf_pages' => 'getPdfPages',
        'pdf_template' => 'getPdfTemplate',
        'project_id' => 'getProjectId',
        'recurring_options' => 'getRecurringOptions',
        'ref_id' => 'getRefId',
        'root_id' => 'getRootId',
        'service_date' => 'getServiceDate',
        'shipping_country' => 'getShippingCountry',
        'status' => 'getStatus',
        'text' => 'getText',
        'text_prefix' => 'getTextPrefix',
        'text_tax' => 'getTextTax',
        'title' => 'getTitle',
        'type' => 'getType',
        'use_shipping_address' => 'getUseShippingAddress',
        'vat_country' => 'getVatCountry',
        'vat_id' => 'getVatId',
        'fulfillment_country' => 'getFulfillmentCountry',
        'vat_option' => 'getVatOption',
        'file_format_config' => 'getFileFormatConfig'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const DISCOUNT_TYPE_PERCENT = 'PERCENT';
    public const DISCOUNT_TYPE_AMOUNT = 'AMOUNT';
    public const STATUS_ACCEPT = 'ACCEPT';
    public const STATUS_DONE = 'DONE';
    public const STATUS_DROPSHIPPING = 'DROPSHIPPING';
    public const STATUS_CANCEL = 'CANCEL';
    public const TYPE_INVOICE = 'INVOICE';
    public const TYPE_RECURRING = 'RECURRING';
    public const TYPE_CREDIT = 'CREDIT';
    public const TYPE_OFFER = 'OFFER';
    public const TYPE_REMINDER = 'REMINDER';
    public const TYPE_DUNNING = 'DUNNING';
    public const TYPE_STORNO = 'STORNO';
    public const TYPE_STORNO_CREDIT = 'STORNO_CREDIT';
    public const TYPE_DELIVERY = 'DELIVERY';
    public const TYPE_PDF = 'PDF';
    public const TYPE_CHARGE = 'CHARGE';
    public const TYPE_CHARGE_CONFIRM = 'CHARGE_CONFIRM';
    public const TYPE_LETTER = 'LETTER';
    public const TYPE_ORDER = 'ORDER';
    public const TYPE_PROFORMA_INVOICE = 'PROFORMA_INVOICE';
    public const TYPE_STORNO_PROFORMA_INVOICE = 'STORNO_PROFORMA_INVOICE';
    public const VAT_OPTION_NULL = NULL;
    public const VAT_OPTION_N_STB = 'nStb';
    public const VAT_OPTION_N_STB_UST_ID = 'nStbUstID';
    public const VAT_OPTION_N_STB_NONE_UST_ID = 'nStbNoneUstID';
    public const VAT_OPTION_N_STB_IM = 'nStbIm';
    public const VAT_OPTION_REVC = 'revc';
    public const VAT_OPTION_IG = 'IG';
    public const VAT_OPTION_AL = 'AL';
    public const VAT_OPTION_S_STFR = 'sStfr';
    public const VAT_OPTION_SMALL_BUSINESS = 'smallBusiness';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiscountTypeAllowableValues()
    {
        return [
            self::DISCOUNT_TYPE_PERCENT,
            self::DISCOUNT_TYPE_AMOUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACCEPT,
            self::STATUS_DONE,
            self::STATUS_DROPSHIPPING,
            self::STATUS_CANCEL,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INVOICE,
            self::TYPE_RECURRING,
            self::TYPE_CREDIT,
            self::TYPE_OFFER,
            self::TYPE_REMINDER,
            self::TYPE_DUNNING,
            self::TYPE_STORNO,
            self::TYPE_STORNO_CREDIT,
            self::TYPE_DELIVERY,
            self::TYPE_PDF,
            self::TYPE_CHARGE,
            self::TYPE_CHARGE_CONFIRM,
            self::TYPE_LETTER,
            self::TYPE_ORDER,
            self::TYPE_PROFORMA_INVOICE,
            self::TYPE_STORNO_PROFORMA_INVOICE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVatOptionAllowableValues()
    {
        return [
            self::VAT_OPTION_NULL,
            self::VAT_OPTION_N_STB,
            self::VAT_OPTION_N_STB_UST_ID,
            self::VAT_OPTION_N_STB_NONE_UST_ID,
            self::VAT_OPTION_N_STB_IM,
            self::VAT_OPTION_REVC,
            self::VAT_OPTION_IG,
            self::VAT_OPTION_AL,
            self::VAT_OPTION_S_STFR,
            self::VAT_OPTION_SMALL_BUSINESS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('attachment_ids', $data ?? [], null);
        $this->setIfExists('label_address', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amount_net', $data ?? [], null);
        $this->setIfExists('bank_debit_form', $data ?? [], null);
        $this->setIfExists('billing_country', $data ?? [], null);
        $this->setIfExists('calc_vat_from', $data ?? [], null);
        $this->setIfExists('cancel_id', $data ?? [], null);
        $this->setIfExists('cash_allowance', $data ?? [], null);
        $this->setIfExists('cash_allowance_days', $data ?? [], null);
        $this->setIfExists('cash_allowance_text', $data ?? [], null);
        $this->setIfExists('contact_id', $data ?? [], null);
        $this->setIfExists('contact_label', $data ?? [], '');
        $this->setIfExists('contact_text', $data ?? [], '');
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], 'EUR');
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('customer_snapshot', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('discount_type', $data ?? [], null);
        $this->setIfExists('document_date', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('edited_at', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('replica_url', $data ?? [], null);
        $this->setIfExists('grace_period', $data ?? [], null);
        $this->setIfExists('due_in_days', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_acceptable_on_public_domain', $data ?? [], false);
        $this->setIfExists('is_archive', $data ?? [], false);
        $this->setIfExists('is_draft', $data ?? [], null);
        $this->setIfExists('is_replica', $data ?? [], false);
        $this->setIfExists('is_oss', $data ?? [], false);
        $this->setIfExists('item_notes', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('last_postbox_id', $data ?? [], null);
        $this->setIfExists('login_id', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], '');
        $this->setIfExists('buyer_reference', $data ?? [], '');
        $this->setIfExists('paid_amount', $data ?? [], null);
        $this->setIfExists('paid_at', $data ?? [], null);
        $this->setIfExists('pdf_pages', $data ?? [], null);
        $this->setIfExists('pdf_template', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('recurring_options', $data ?? [], null);
        $this->setIfExists('ref_id', $data ?? [], null);
        $this->setIfExists('root_id', $data ?? [], null);
        $this->setIfExists('service_date', $data ?? [], null);
        $this->setIfExists('shipping_country', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('text_prefix', $data ?? [], null);
        $this->setIfExists('text_tax', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'INVOICE');
        $this->setIfExists('use_shipping_address', $data ?? [], false);
        $this->setIfExists('vat_country', $data ?? [], null);
        $this->setIfExists('vat_id', $data ?? [], '');
        $this->setIfExists('fulfillment_country', $data ?? [], null);
        $this->setIfExists('vat_option', $data ?? [], null);
        $this->setIfExists('file_format_config', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDiscountTypeAllowableValues();
        if (!is_null($this->container['discount_type']) && !in_array($this->container['discount_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'discount_type', must be one of '%s'",
                $this->container['discount_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVatOptionAllowableValues();
        if (!is_null($this->container['vat_option']) && !in_array($this->container['vat_option'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'vat_option', must be one of '%s'",
                $this->container['vat_option'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \cbeyersdorf\easybill\Model\DocumentAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \cbeyersdorf\easybill\Model\DocumentAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets attachment_ids
     *
     * @return int[]|null
     */
    public function getAttachmentIds()
    {
        return $this->container['attachment_ids'];
    }

    /**
     * Sets attachment_ids
     *
     * @param int[]|null $attachment_ids attachment_ids
     *
     * @return self
     */
    public function setAttachmentIds($attachment_ids)
    {
        if (is_null($attachment_ids)) {
            throw new \InvalidArgumentException('non-nullable attachment_ids cannot be null');
        }
        $this->container['attachment_ids'] = $attachment_ids;

        return $this;
    }

    /**
     * Gets label_address
     *
     * @return \cbeyersdorf\easybill\Model\DocumentAddress|null
     */
    public function getLabelAddress()
    {
        return $this->container['label_address'];
    }

    /**
     * Sets label_address
     *
     * @param \cbeyersdorf\easybill\Model\DocumentAddress|null $label_address label_address
     *
     * @return self
     */
    public function setLabelAddress($label_address)
    {
        if (is_null($label_address)) {
            throw new \InvalidArgumentException('non-nullable label_address cannot be null');
        }
        $this->container['label_address'] = $label_address;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount Amount in cents  (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_net
     *
     * @return int|null
     */
    public function getAmountNet()
    {
        return $this->container['amount_net'];
    }

    /**
     * Sets amount_net
     *
     * @param int|null $amount_net Amount in cents  (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setAmountNet($amount_net)
    {
        if (is_null($amount_net)) {
            throw new \InvalidArgumentException('non-nullable amount_net cannot be null');
        }
        $this->container['amount_net'] = $amount_net;

        return $this;
    }

    /**
     * Gets bank_debit_form
     *
     * @return string|null
     */
    public function getBankDebitForm()
    {
        return $this->container['bank_debit_form'];
    }

    /**
     * Sets bank_debit_form
     *
     * @param string|null $bank_debit_form bank_debit_form
     *
     * @return self
     */
    public function setBankDebitForm($bank_debit_form)
    {
        if (is_null($bank_debit_form)) {
            array_push($this->openAPINullablesSetToNull, 'bank_debit_form');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bank_debit_form', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bank_debit_form'] = $bank_debit_form;

        return $this;
    }

    /**
     * Gets billing_country
     *
     * @return string|null
     */
    public function getBillingCountry()
    {
        return $this->container['billing_country'];
    }

    /**
     * Sets billing_country
     *
     * @param string|null $billing_country billing_country
     *
     * @return self
     */
    public function setBillingCountry($billing_country)
    {
        if (is_null($billing_country)) {
            throw new \InvalidArgumentException('non-nullable billing_country cannot be null');
        }
        $this->container['billing_country'] = $billing_country;

        return $this;
    }

    /**
     * Gets calc_vat_from
     *
     * @return int|null
     */
    public function getCalcVatFrom()
    {
        return $this->container['calc_vat_from'];
    }

    /**
     * Sets calc_vat_from
     *
     * @param int|null $calc_vat_from 0 === Net, 1 === Gross.
     *
     * @return self
     */
    public function setCalcVatFrom($calc_vat_from)
    {
        if (is_null($calc_vat_from)) {
            throw new \InvalidArgumentException('non-nullable calc_vat_from cannot be null');
        }
        $this->container['calc_vat_from'] = $calc_vat_from;

        return $this;
    }

    /**
     * Gets cancel_id
     *
     * @return int|null
     */
    public function getCancelId()
    {
        return $this->container['cancel_id'];
    }

    /**
     * Sets cancel_id
     *
     * @param int|null $cancel_id ID from the cancel document. Only for document type INVOICE.
     *
     * @return self
     */
    public function setCancelId($cancel_id)
    {
        if (is_null($cancel_id)) {
            throw new \InvalidArgumentException('non-nullable cancel_id cannot be null');
        }
        $this->container['cancel_id'] = $cancel_id;

        return $this;
    }

    /**
     * Gets cash_allowance
     *
     * @return float|null
     */
    public function getCashAllowance()
    {
        return $this->container['cash_allowance'];
    }

    /**
     * Sets cash_allowance
     *
     * @param float|null $cash_allowance cash_allowance
     *
     * @return self
     */
    public function setCashAllowance($cash_allowance)
    {
        if (is_null($cash_allowance)) {
            array_push($this->openAPINullablesSetToNull, 'cash_allowance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_allowance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cash_allowance'] = $cash_allowance;

        return $this;
    }

    /**
     * Gets cash_allowance_days
     *
     * @return int|null
     */
    public function getCashAllowanceDays()
    {
        return $this->container['cash_allowance_days'];
    }

    /**
     * Sets cash_allowance_days
     *
     * @param int|null $cash_allowance_days cash_allowance_days
     *
     * @return self
     */
    public function setCashAllowanceDays($cash_allowance_days)
    {
        if (is_null($cash_allowance_days)) {
            array_push($this->openAPINullablesSetToNull, 'cash_allowance_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_allowance_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cash_allowance_days'] = $cash_allowance_days;

        return $this;
    }

    /**
     * Gets cash_allowance_text
     *
     * @return string|null
     */
    public function getCashAllowanceText()
    {
        return $this->container['cash_allowance_text'];
    }

    /**
     * Sets cash_allowance_text
     *
     * @param string|null $cash_allowance_text cash_allowance_text
     *
     * @return self
     */
    public function setCashAllowanceText($cash_allowance_text)
    {
        if (is_null($cash_allowance_text)) {
            array_push($this->openAPINullablesSetToNull, 'cash_allowance_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cash_allowance_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cash_allowance_text'] = $cash_allowance_text;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int|null $contact_id contact_id
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        if (is_null($contact_id)) {
            array_push($this->openAPINullablesSetToNull, 'contact_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets contact_label
     *
     * @return string|null
     */
    public function getContactLabel()
    {
        return $this->container['contact_label'];
    }

    /**
     * Sets contact_label
     *
     * @param string|null $contact_label contact_label
     *
     * @return self
     */
    public function setContactLabel($contact_label)
    {
        if (is_null($contact_label)) {
            throw new \InvalidArgumentException('non-nullable contact_label cannot be null');
        }
        $this->container['contact_label'] = $contact_label;

        return $this;
    }

    /**
     * Gets contact_text
     *
     * @return string|null
     */
    public function getContactText()
    {
        return $this->container['contact_text'];
    }

    /**
     * Sets contact_text
     *
     * @param string|null $contact_text contact_text
     *
     * @return self
     */
    public function setContactText($contact_text)
    {
        if (is_null($contact_text)) {
            throw new \InvalidArgumentException('non-nullable contact_text cannot be null');
        }
        $this->container['contact_text'] = $contact_text;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_snapshot
     *
     * @return \cbeyersdorf\easybill\Model\CustomerSnapshot|null
     */
    public function getCustomerSnapshot()
    {
        return $this->container['customer_snapshot'];
    }

    /**
     * Sets customer_snapshot
     *
     * @param \cbeyersdorf\easybill\Model\CustomerSnapshot|null $customer_snapshot customer_snapshot
     *
     * @return self
     */
    public function setCustomerSnapshot($customer_snapshot)
    {
        if (is_null($customer_snapshot)) {
            throw new \InvalidArgumentException('non-nullable customer_snapshot cannot be null');
        }
        $this->container['customer_snapshot'] = $customer_snapshot;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return string|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param string|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            array_push($this->openAPINullablesSetToNull, 'discount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return string|null
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param string|null $discount_type discount_type
     *
     * @return self
     */
    public function setDiscountType($discount_type)
    {
        if (is_null($discount_type)) {
            array_push($this->openAPINullablesSetToNull, 'discount_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDiscountTypeAllowableValues();
        if (!is_null($discount_type) && !in_array($discount_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'discount_type', must be one of '%s'",
                    $discount_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime|null
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime|null $document_date document_date
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {
        if (is_null($document_date)) {
            throw new \InvalidArgumentException('non-nullable document_date cannot be null');
        }
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date To change the value use grace_period.
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets edited_at
     *
     * @return \DateTime|null
     */
    public function getEditedAt()
    {
        return $this->container['edited_at'];
    }

    /**
     * Sets edited_at
     *
     * @param \DateTime|null $edited_at edited_at
     *
     * @return self
     */
    public function setEditedAt($edited_at)
    {
        if (is_null($edited_at)) {
            throw new \InvalidArgumentException('non-nullable edited_at cannot be null');
        }
        $this->container['edited_at'] = $edited_at;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets replica_url
     *
     * @return string|null
     */
    public function getReplicaUrl()
    {
        return $this->container['replica_url'];
    }

    /**
     * Sets replica_url
     *
     * @param string|null $replica_url replica_url
     *
     * @return self
     */
    public function setReplicaUrl($replica_url)
    {
        if (is_null($replica_url)) {
            array_push($this->openAPINullablesSetToNull, 'replica_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replica_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['replica_url'] = $replica_url;

        return $this;
    }

    /**
     * Gets grace_period
     *
     * @return int|null
     */
    public function getGracePeriod()
    {
        return $this->container['grace_period'];
    }

    /**
     * Sets grace_period
     *
     * @param int|null $grace_period will be replaced by its alias due_in_days.
     *
     * @return self
     */
    public function setGracePeriod($grace_period)
    {
        if (is_null($grace_period)) {
            array_push($this->openAPINullablesSetToNull, 'grace_period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('grace_period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['grace_period'] = $grace_period;

        return $this;
    }

    /**
     * Gets due_in_days
     *
     * @return int|null
     */
    public function getDueInDays()
    {
        return $this->container['due_in_days'];
    }

    /**
     * Sets due_in_days
     *
     * @param int|null $due_in_days due date in days.
     *
     * @return self
     */
    public function setDueInDays($due_in_days)
    {
        if (is_null($due_in_days)) {
            array_push($this->openAPINullablesSetToNull, 'due_in_days');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('due_in_days', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['due_in_days'] = $due_in_days;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_acceptable_on_public_domain
     *
     * @return bool|null
     */
    public function getIsAcceptableOnPublicDomain()
    {
        return $this->container['is_acceptable_on_public_domain'];
    }

    /**
     * Sets is_acceptable_on_public_domain
     *
     * @param bool|null $is_acceptable_on_public_domain Indicates if a document can be accepted by the end customer through the document's public access page.
     *
     * @return self
     */
    public function setIsAcceptableOnPublicDomain($is_acceptable_on_public_domain)
    {
        if (is_null($is_acceptable_on_public_domain)) {
            throw new \InvalidArgumentException('non-nullable is_acceptable_on_public_domain cannot be null');
        }
        $this->container['is_acceptable_on_public_domain'] = $is_acceptable_on_public_domain;

        return $this;
    }

    /**
     * Gets is_archive
     *
     * @return bool|null
     */
    public function getIsArchive()
    {
        return $this->container['is_archive'];
    }

    /**
     * Sets is_archive
     *
     * @param bool|null $is_archive is_archive
     *
     * @return self
     */
    public function setIsArchive($is_archive)
    {
        if (is_null($is_archive)) {
            throw new \InvalidArgumentException('non-nullable is_archive cannot be null');
        }
        $this->container['is_archive'] = $is_archive;

        return $this;
    }

    /**
     * Gets is_draft
     *
     * @return bool|null
     */
    public function getIsDraft()
    {
        return $this->container['is_draft'];
    }

    /**
     * Sets is_draft
     *
     * @param bool|null $is_draft This property is read only. To finish the document call /documents/{id}/done.
     *
     * @return self
     */
    public function setIsDraft($is_draft)
    {
        if (is_null($is_draft)) {
            throw new \InvalidArgumentException('non-nullable is_draft cannot be null');
        }
        $this->container['is_draft'] = $is_draft;

        return $this;
    }

    /**
     * Gets is_replica
     *
     * @return bool|null
     */
    public function getIsReplica()
    {
        return $this->container['is_replica'];
    }

    /**
     * Sets is_replica
     *
     * @param bool|null $is_replica Marks a document as a replica from another software.
     *
     * @return self
     */
    public function setIsReplica($is_replica)
    {
        if (is_null($is_replica)) {
            throw new \InvalidArgumentException('non-nullable is_replica cannot be null');
        }
        $this->container['is_replica'] = $is_replica;

        return $this;
    }

    /**
     * Gets is_oss
     *
     * @return bool|null
     */
    public function getIsOss()
    {
        return $this->container['is_oss'];
    }

    /**
     * Sets is_oss
     *
     * @param bool|null $is_oss Indicates if a document is a one-stop-shop document
     *
     * @return self
     */
    public function setIsOss($is_oss)
    {
        if (is_null($is_oss)) {
            throw new \InvalidArgumentException('non-nullable is_oss cannot be null');
        }
        $this->container['is_oss'] = $is_oss;

        return $this;
    }

    /**
     * Gets item_notes
     *
     * @return string[]|null
     */
    public function getItemNotes()
    {
        return $this->container['item_notes'];
    }

    /**
     * Sets item_notes
     *
     * @param string[]|null $item_notes Field holds all unique document_note of items for the document
     *
     * @return self
     */
    public function setItemNotes($item_notes)
    {
        if (is_null($item_notes)) {
            throw new \InvalidArgumentException('non-nullable item_notes cannot be null');
        }
        $this->container['item_notes'] = $item_notes;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \cbeyersdorf\easybill\Model\DocumentPosition[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \cbeyersdorf\easybill\Model\DocumentPosition[]|null $items items
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets last_postbox_id
     *
     * @return int|null
     */
    public function getLastPostboxId()
    {
        return $this->container['last_postbox_id'];
    }

    /**
     * Sets last_postbox_id
     *
     * @param int|null $last_postbox_id last_postbox_id
     *
     * @return self
     */
    public function setLastPostboxId($last_postbox_id)
    {
        if (is_null($last_postbox_id)) {
            throw new \InvalidArgumentException('non-nullable last_postbox_id cannot be null');
        }
        $this->container['last_postbox_id'] = $last_postbox_id;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return int|null
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param int|null $login_id If omitted or null, the currently active login is used.
     *
     * @return self
     */
    public function setLoginId($login_id)
    {
        if (is_null($login_id)) {
            throw new \InvalidArgumentException('non-nullable login_id cannot be null');
        }
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number order_number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets buyer_reference
     *
     * @return string|null
     */
    public function getBuyerReference()
    {
        return $this->container['buyer_reference'];
    }

    /**
     * Sets buyer_reference
     *
     * @param string|null $buyer_reference buyer_reference
     *
     * @return self
     */
    public function setBuyerReference($buyer_reference)
    {
        if (is_null($buyer_reference)) {
            throw new \InvalidArgumentException('non-nullable buyer_reference cannot be null');
        }
        $this->container['buyer_reference'] = $buyer_reference;

        return $this;
    }

    /**
     * Gets paid_amount
     *
     * @return int|null
     */
    public function getPaidAmount()
    {
        return $this->container['paid_amount'];
    }

    /**
     * Sets paid_amount
     *
     * @param int|null $paid_amount paid_amount
     *
     * @return self
     */
    public function setPaidAmount($paid_amount)
    {
        if (is_null($paid_amount)) {
            throw new \InvalidArgumentException('non-nullable paid_amount cannot be null');
        }
        $this->container['paid_amount'] = $paid_amount;

        return $this;
    }

    /**
     * Gets paid_at
     *
     * @return \DateTime|null
     */
    public function getPaidAt()
    {
        return $this->container['paid_at'];
    }

    /**
     * Sets paid_at
     *
     * @param \DateTime|null $paid_at paid_at
     *
     * @return self
     */
    public function setPaidAt($paid_at)
    {
        if (is_null($paid_at)) {
            throw new \InvalidArgumentException('non-nullable paid_at cannot be null');
        }
        $this->container['paid_at'] = $paid_at;

        return $this;
    }

    /**
     * Gets pdf_pages
     *
     * @return int|null
     */
    public function getPdfPages()
    {
        return $this->container['pdf_pages'];
    }

    /**
     * Sets pdf_pages
     *
     * @param int|null $pdf_pages pdf_pages
     *
     * @return self
     */
    public function setPdfPages($pdf_pages)
    {
        if (is_null($pdf_pages)) {
            throw new \InvalidArgumentException('non-nullable pdf_pages cannot be null');
        }
        $this->container['pdf_pages'] = $pdf_pages;

        return $this;
    }

    /**
     * Gets pdf_template
     *
     * @return string|null
     */
    public function getPdfTemplate()
    {
        return $this->container['pdf_template'];
    }

    /**
     * Sets pdf_template
     *
     * @param string|null $pdf_template Default template is null or 'DE', default english is 'EN' and for all others use the numeric template ID.
     *
     * @return self
     */
    public function setPdfTemplate($pdf_template)
    {
        if (is_null($pdf_template)) {
            throw new \InvalidArgumentException('non-nullable pdf_template cannot be null');
        }
        $this->container['pdf_template'] = $pdf_template;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            array_push($this->openAPINullablesSetToNull, 'project_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('project_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets recurring_options
     *
     * @return \cbeyersdorf\easybill\Model\DocumentRecurring|null
     */
    public function getRecurringOptions()
    {
        return $this->container['recurring_options'];
    }

    /**
     * Sets recurring_options
     *
     * @param \cbeyersdorf\easybill\Model\DocumentRecurring|null $recurring_options recurring_options
     *
     * @return self
     */
    public function setRecurringOptions($recurring_options)
    {
        if (is_null($recurring_options)) {
            throw new \InvalidArgumentException('non-nullable recurring_options cannot be null');
        }
        $this->container['recurring_options'] = $recurring_options;

        return $this;
    }

    /**
     * Gets ref_id
     *
     * @return int|null
     */
    public function getRefId()
    {
        return $this->container['ref_id'];
    }

    /**
     * Sets ref_id
     *
     * @param int|null $ref_id Reference document id
     *
     * @return self
     */
    public function setRefId($ref_id)
    {
        if (is_null($ref_id)) {
            array_push($this->openAPINullablesSetToNull, 'ref_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ref_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ref_id'] = $ref_id;

        return $this;
    }

    /**
     * Gets root_id
     *
     * @return int|null
     */
    public function getRootId()
    {
        return $this->container['root_id'];
    }

    /**
     * Sets root_id
     *
     * @param int|null $root_id Root document id
     *
     * @return self
     */
    public function setRootId($root_id)
    {
        if (is_null($root_id)) {
            array_push($this->openAPINullablesSetToNull, 'root_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('root_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['root_id'] = $root_id;

        return $this;
    }

    /**
     * Gets service_date
     *
     * @return \cbeyersdorf\easybill\Model\ServiceDate|null
     */
    public function getServiceDate()
    {
        return $this->container['service_date'];
    }

    /**
     * Sets service_date
     *
     * @param \cbeyersdorf\easybill\Model\ServiceDate|null $service_date service_date
     *
     * @return self
     */
    public function setServiceDate($service_date)
    {
        if (is_null($service_date)) {
            throw new \InvalidArgumentException('non-nullable service_date cannot be null');
        }
        $this->container['service_date'] = $service_date;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string|null
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string|null $shipping_country shipping_country
     *
     * @return self
     */
    public function setShippingCountry($shipping_country)
    {
        if (is_null($shipping_country)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status This value can only be used in document type DELIVERY, ORDER, CHARGE or OFFER. NULL is default = not set.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string|null
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string|null $text text
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets text_prefix
     *
     * @return string|null
     */
    public function getTextPrefix()
    {
        return $this->container['text_prefix'];
    }

    /**
     * Sets text_prefix
     *
     * @param string|null $text_prefix text_prefix
     *
     * @return self
     */
    public function setTextPrefix($text_prefix)
    {
        if (is_null($text_prefix)) {
            throw new \InvalidArgumentException('non-nullable text_prefix cannot be null');
        }
        $this->container['text_prefix'] = $text_prefix;

        return $this;
    }

    /**
     * Gets text_tax
     *
     * @return string|null
     */
    public function getTextTax()
    {
        return $this->container['text_tax'];
    }

    /**
     * Sets text_tax
     *
     * @param string|null $text_tax Overwrites the default vat-option text from the document layout. It is only displayed in documents with the type other than: Delivery, Dunning, Reminder or Letter and a different vat-option than null
     *
     * @return self
     */
    public function setTextTax($text_tax)
    {
        if (is_null($text_tax)) {
            array_push($this->openAPINullablesSetToNull, 'text_tax');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('text_tax', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['text_tax'] = $text_tax;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Can only set on create.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets use_shipping_address
     *
     * @return bool|null
     */
    public function getUseShippingAddress()
    {
        return $this->container['use_shipping_address'];
    }

    /**
     * Sets use_shipping_address
     *
     * @param bool|null $use_shipping_address If true and customer has shipping address then it will be used.
     *
     * @return self
     */
    public function setUseShippingAddress($use_shipping_address)
    {
        if (is_null($use_shipping_address)) {
            throw new \InvalidArgumentException('non-nullable use_shipping_address cannot be null');
        }
        $this->container['use_shipping_address'] = $use_shipping_address;

        return $this;
    }

    /**
     * Gets vat_country
     *
     * @return string|null
     */
    public function getVatCountry()
    {
        return $this->container['vat_country'];
    }

    /**
     * Sets vat_country
     *
     * @param string|null $vat_country vat_country
     *
     * @return self
     */
    public function setVatCountry($vat_country)
    {
        if (is_null($vat_country)) {
            array_push($this->openAPINullablesSetToNull, 'vat_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['vat_country'] = $vat_country;

        return $this;
    }

    /**
     * Gets vat_id
     *
     * @return string|null
     */
    public function getVatId()
    {
        return $this->container['vat_id'];
    }

    /**
     * Sets vat_id
     *
     * @param string|null $vat_id vat_id
     *
     * @return self
     */
    public function setVatId($vat_id)
    {
        if (is_null($vat_id)) {
            throw new \InvalidArgumentException('non-nullable vat_id cannot be null');
        }
        $this->container['vat_id'] = $vat_id;

        return $this;
    }

    /**
     * Gets fulfillment_country
     *
     * @return string|null
     */
    public function getFulfillmentCountry()
    {
        return $this->container['fulfillment_country'];
    }

    /**
     * Sets fulfillment_country
     *
     * @param string|null $fulfillment_country fulfillment_country
     *
     * @return self
     */
    public function setFulfillmentCountry($fulfillment_country)
    {
        if (is_null($fulfillment_country)) {
            array_push($this->openAPINullablesSetToNull, 'fulfillment_country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fulfillment_country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fulfillment_country'] = $fulfillment_country;

        return $this;
    }

    /**
     * Gets vat_option
     *
     * @return string|null
     */
    public function getVatOption()
    {
        return $this->container['vat_option'];
    }

    /**
     * Sets vat_option
     *
     * @param string|null $vat_option NULL: Normal steuerbar<br/> nStb: Nicht steuerbar (Drittland)<br/> nStbUstID: Nicht steuerbar (EU mit USt-IdNr.)<br/> nStbNoneUstID: Nicht steuerbar (EU ohne USt-IdNr.)<br/> nStbIm: Nicht steuerbarer Innenumsatz<br/> revc: Steuerschuldwechsel §13b (Inland)<br/> IG: Innergemeinschaftliche Lieferung<br/> AL: Ausfuhrlieferung<br/> sStfr: sonstige Steuerbefreiung<br/> smallBusiness: Kleinunternehmen (Keine MwSt.)
     *
     * @return self
     */
    public function setVatOption($vat_option)
    {
        if (is_null($vat_option)) {
            array_push($this->openAPINullablesSetToNull, 'vat_option');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('vat_option', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getVatOptionAllowableValues();
        if (!is_null($vat_option) && !in_array($vat_option, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'vat_option', must be one of '%s'",
                    $vat_option,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['vat_option'] = $vat_option;

        return $this;
    }

    /**
     * Gets file_format_config
     *
     * @return \cbeyersdorf\easybill\Model\FileFormatConfig[]|null
     */
    public function getFileFormatConfig()
    {
        return $this->container['file_format_config'];
    }

    /**
     * Sets file_format_config
     *
     * @param \cbeyersdorf\easybill\Model\FileFormatConfig[]|null $file_format_config file_format_config
     *
     * @return self
     */
    public function setFileFormatConfig($file_format_config)
    {
        if (is_null($file_format_config)) {
            throw new \InvalidArgumentException('non-nullable file_format_config cannot be null');
        }
        $this->container['file_format_config'] = $file_format_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


