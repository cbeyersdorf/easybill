<?php
/**
 * DocumentPosition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * The version of the OpenAPI document: 1.88.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbeyersdorf\easybill\Model;

use \ArrayAccess;
use \cbeyersdorf\easybill\ObjectSerializer;

/**
 * DocumentPosition Class Doc Comment
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentPosition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentPosition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number' => 'string',
        'description' => 'string',
        'document_note' => 'string',
        'quantity' => 'float',
        'quantity_str' => 'string',
        'unit' => 'string',
        'type' => 'string',
        'position' => 'int',
        'single_price_net' => 'float',
        'single_price_gross' => 'float',
        'vat_percent' => 'float',
        'discount' => 'float',
        'discount_type' => 'string',
        'position_id' => 'int',
        'total_price_net' => 'float',
        'total_price_gross' => 'float',
        'total_vat' => 'float',
        'serial_number_id' => 'string',
        'serial_number' => 'string',
        'booking_account' => 'string',
        'export_cost_1' => 'string',
        'export_cost_2' => 'string',
        'cost_price_net' => 'float',
        'cost_price_total' => 'float',
        'cost_price_charge' => 'float',
        'cost_price_charge_type' => 'string',
        'item_type' => 'string',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number' => null,
        'description' => null,
        'document_note' => null,
        'quantity' => 'float',
        'quantity_str' => null,
        'unit' => null,
        'type' => null,
        'position' => null,
        'single_price_net' => 'float',
        'single_price_gross' => 'float',
        'vat_percent' => 'float',
        'discount' => 'float',
        'discount_type' => null,
        'position_id' => 'int64',
        'total_price_net' => 'float',
        'total_price_gross' => 'float',
        'total_vat' => 'float',
        'serial_number_id' => null,
        'serial_number' => null,
        'booking_account' => null,
        'export_cost_1' => null,
        'export_cost_2' => null,
        'cost_price_net' => 'float',
        'cost_price_total' => 'float',
        'cost_price_charge' => 'float',
        'cost_price_charge_type' => null,
        'item_type' => null,
        'id' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'number' => true,
        'description' => true,
        'document_note' => false,
        'quantity' => false,
        'quantity_str' => false,
        'unit' => true,
        'type' => false,
        'position' => false,
        'single_price_net' => true,
        'single_price_gross' => false,
        'vat_percent' => false,
        'discount' => true,
        'discount_type' => true,
        'position_id' => true,
        'total_price_net' => false,
        'total_price_gross' => false,
        'total_vat' => false,
        'serial_number_id' => false,
        'serial_number' => false,
        'booking_account' => true,
        'export_cost_1' => true,
        'export_cost_2' => true,
        'cost_price_net' => true,
        'cost_price_total' => false,
        'cost_price_charge' => false,
        'cost_price_charge_type' => false,
        'item_type' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'description' => 'description',
        'document_note' => 'document_note',
        'quantity' => 'quantity',
        'quantity_str' => 'quantity_str',
        'unit' => 'unit',
        'type' => 'type',
        'position' => 'position',
        'single_price_net' => 'single_price_net',
        'single_price_gross' => 'single_price_gross',
        'vat_percent' => 'vat_percent',
        'discount' => 'discount',
        'discount_type' => 'discount_type',
        'position_id' => 'position_id',
        'total_price_net' => 'total_price_net',
        'total_price_gross' => 'total_price_gross',
        'total_vat' => 'total_vat',
        'serial_number_id' => 'serial_number_id',
        'serial_number' => 'serial_number',
        'booking_account' => 'booking_account',
        'export_cost_1' => 'export_cost_1',
        'export_cost_2' => 'export_cost_2',
        'cost_price_net' => 'cost_price_net',
        'cost_price_total' => 'cost_price_total',
        'cost_price_charge' => 'cost_price_charge',
        'cost_price_charge_type' => 'cost_price_charge_type',
        'item_type' => 'itemType',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'description' => 'setDescription',
        'document_note' => 'setDocumentNote',
        'quantity' => 'setQuantity',
        'quantity_str' => 'setQuantityStr',
        'unit' => 'setUnit',
        'type' => 'setType',
        'position' => 'setPosition',
        'single_price_net' => 'setSinglePriceNet',
        'single_price_gross' => 'setSinglePriceGross',
        'vat_percent' => 'setVatPercent',
        'discount' => 'setDiscount',
        'discount_type' => 'setDiscountType',
        'position_id' => 'setPositionId',
        'total_price_net' => 'setTotalPriceNet',
        'total_price_gross' => 'setTotalPriceGross',
        'total_vat' => 'setTotalVat',
        'serial_number_id' => 'setSerialNumberId',
        'serial_number' => 'setSerialNumber',
        'booking_account' => 'setBookingAccount',
        'export_cost_1' => 'setExportCost1',
        'export_cost_2' => 'setExportCost2',
        'cost_price_net' => 'setCostPriceNet',
        'cost_price_total' => 'setCostPriceTotal',
        'cost_price_charge' => 'setCostPriceCharge',
        'cost_price_charge_type' => 'setCostPriceChargeType',
        'item_type' => 'setItemType',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'description' => 'getDescription',
        'document_note' => 'getDocumentNote',
        'quantity' => 'getQuantity',
        'quantity_str' => 'getQuantityStr',
        'unit' => 'getUnit',
        'type' => 'getType',
        'position' => 'getPosition',
        'single_price_net' => 'getSinglePriceNet',
        'single_price_gross' => 'getSinglePriceGross',
        'vat_percent' => 'getVatPercent',
        'discount' => 'getDiscount',
        'discount_type' => 'getDiscountType',
        'position_id' => 'getPositionId',
        'total_price_net' => 'getTotalPriceNet',
        'total_price_gross' => 'getTotalPriceGross',
        'total_vat' => 'getTotalVat',
        'serial_number_id' => 'getSerialNumberId',
        'serial_number' => 'getSerialNumber',
        'booking_account' => 'getBookingAccount',
        'export_cost_1' => 'getExportCost1',
        'export_cost_2' => 'getExportCost2',
        'cost_price_net' => 'getCostPriceNet',
        'cost_price_total' => 'getCostPriceTotal',
        'cost_price_charge' => 'getCostPriceCharge',
        'cost_price_charge_type' => 'getCostPriceChargeType',
        'item_type' => 'getItemType',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_POSITION = 'POSITION';
    public const TYPE_POSITION_NOCALC = 'POSITION_NOCALC';
    public const TYPE_TEXT = 'TEXT';
    public const DISCOUNT_TYPE_PERCENT = 'PERCENT';
    public const DISCOUNT_TYPE_AMOUNT = 'AMOUNT';
    public const COST_PRICE_CHARGE_TYPE_PERCENT = 'PERCENT';
    public const COST_PRICE_CHARGE_TYPE_AMOUNT = 'AMOUNT';
    public const ITEM_TYPE_PRODUCT = 'PRODUCT';
    public const ITEM_TYPE_SERVICE = 'SERVICE';
    public const ITEM_TYPE_UNDEFINED = 'UNDEFINED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_POSITION,
            self::TYPE_POSITION_NOCALC,
            self::TYPE_TEXT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDiscountTypeAllowableValues()
    {
        return [
            self::DISCOUNT_TYPE_PERCENT,
            self::DISCOUNT_TYPE_AMOUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCostPriceChargeTypeAllowableValues()
    {
        return [
            self::COST_PRICE_CHARGE_TYPE_PERCENT,
            self::COST_PRICE_CHARGE_TYPE_AMOUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getItemTypeAllowableValues()
    {
        return [
            self::ITEM_TYPE_PRODUCT,
            self::ITEM_TYPE_SERVICE,
            self::ITEM_TYPE_UNDEFINED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('document_note', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], 1.0);
        $this->setIfExists('quantity_str', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'POSITION');
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('single_price_net', $data ?? [], null);
        $this->setIfExists('single_price_gross', $data ?? [], null);
        $this->setIfExists('vat_percent', $data ?? [], 0.0);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('discount_type', $data ?? [], null);
        $this->setIfExists('position_id', $data ?? [], null);
        $this->setIfExists('total_price_net', $data ?? [], null);
        $this->setIfExists('total_price_gross', $data ?? [], null);
        $this->setIfExists('total_vat', $data ?? [], null);
        $this->setIfExists('serial_number_id', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('booking_account', $data ?? [], null);
        $this->setIfExists('export_cost_1', $data ?? [], null);
        $this->setIfExists('export_cost_2', $data ?? [], null);
        $this->setIfExists('cost_price_net', $data ?? [], null);
        $this->setIfExists('cost_price_total', $data ?? [], null);
        $this->setIfExists('cost_price_charge', $data ?? [], null);
        $this->setIfExists('cost_price_charge_type', $data ?? [], null);
        $this->setIfExists('item_type', $data ?? [], 'UNDEFINED');
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['quantity_str']) && (mb_strlen($this->container['quantity_str']) > 10)) {
            $invalidProperties[] = "invalid value for 'quantity_str', the character length must be smaller than or equal to 10.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDiscountTypeAllowableValues();
        if (!is_null($this->container['discount_type']) && !in_array($this->container['discount_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'discount_type', must be one of '%s'",
                $this->container['discount_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCostPriceChargeTypeAllowableValues();
        if (!is_null($this->container['cost_price_charge_type']) && !in_array($this->container['cost_price_charge_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cost_price_charge_type', must be one of '%s'",
                $this->container['cost_price_charge_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getItemTypeAllowableValues();
        if (!is_null($this->container['item_type']) && !in_array($this->container['item_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'item_type', must be one of '%s'",
                $this->container['item_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            array_push($this->openAPINullablesSetToNull, 'number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document_note
     *
     * @return string|null
     */
    public function getDocumentNote()
    {
        return $this->container['document_note'];
    }

    /**
     * Sets document_note
     *
     * @param string|null $document_note This field can be used in the document text areas with the liquid placeholder {{document.item_notes}}. Every note is only displayed once for every kind of product. This is useful if you want to add something like an instruction.
     *
     * @return self
     */
    public function setDocumentNote($document_note)
    {
        if (is_null($document_note)) {
            throw new \InvalidArgumentException('non-nullable document_note cannot be null');
        }
        $this->container['document_note'] = $document_note;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_str
     *
     * @return string|null
     */
    public function getQuantityStr()
    {
        return $this->container['quantity_str'];
    }

    /**
     * Sets quantity_str
     *
     * @param string|null $quantity_str Use quantity_str if you want to set a quantity like: 1:30 h or 3x5 m. quantity_str overwrites quantity.
     *
     * @return self
     */
    public function setQuantityStr($quantity_str)
    {
        if (is_null($quantity_str)) {
            throw new \InvalidArgumentException('non-nullable quantity_str cannot be null');
        }
        if ((mb_strlen($quantity_str) > 10)) {
            throw new \InvalidArgumentException('invalid length for $quantity_str when calling DocumentPosition., must be smaller than or equal to 10.');
        }

        $this->container['quantity_str'] = $quantity_str;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            array_push($this->openAPINullablesSetToNull, 'unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int|null $position Automatic by default (first item: 1, second item: 2, ...)
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets single_price_net
     *
     * @return float|null
     */
    public function getSinglePriceNet()
    {
        return $this->container['single_price_net'];
    }

    /**
     * Sets single_price_net
     *
     * @param float|null $single_price_net single_price_net
     *
     * @return self
     */
    public function setSinglePriceNet($single_price_net)
    {
        if (is_null($single_price_net)) {
            array_push($this->openAPINullablesSetToNull, 'single_price_net');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('single_price_net', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['single_price_net'] = $single_price_net;

        return $this;
    }

    /**
     * Gets single_price_gross
     *
     * @return float|null
     */
    public function getSinglePriceGross()
    {
        return $this->container['single_price_gross'];
    }

    /**
     * Sets single_price_gross
     *
     * @param float|null $single_price_gross single_price_gross
     *
     * @return self
     */
    public function setSinglePriceGross($single_price_gross)
    {
        if (is_null($single_price_gross)) {
            throw new \InvalidArgumentException('non-nullable single_price_gross cannot be null');
        }
        $this->container['single_price_gross'] = $single_price_gross;

        return $this;
    }

    /**
     * Gets vat_percent
     *
     * @return float|null
     */
    public function getVatPercent()
    {
        return $this->container['vat_percent'];
    }

    /**
     * Sets vat_percent
     *
     * @param float|null $vat_percent vat_percent
     *
     * @return self
     */
    public function setVatPercent($vat_percent)
    {
        if (is_null($vat_percent)) {
            throw new \InvalidArgumentException('non-nullable vat_percent cannot be null');
        }
        $this->container['vat_percent'] = $vat_percent;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            array_push($this->openAPINullablesSetToNull, 'discount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return string|null
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param string|null $discount_type discount_type
     *
     * @return self
     */
    public function setDiscountType($discount_type)
    {
        if (is_null($discount_type)) {
            array_push($this->openAPINullablesSetToNull, 'discount_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getDiscountTypeAllowableValues();
        if (!is_null($discount_type) && !in_array($discount_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'discount_type', must be one of '%s'",
                    $discount_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets position_id
     *
     * @return int|null
     */
    public function getPositionId()
    {
        return $this->container['position_id'];
    }

    /**
     * Sets position_id
     *
     * @param int|null $position_id If set, values are copied from the referenced position
     *
     * @return self
     */
    public function setPositionId($position_id)
    {
        if (is_null($position_id)) {
            array_push($this->openAPINullablesSetToNull, 'position_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('position_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['position_id'] = $position_id;

        return $this;
    }

    /**
     * Gets total_price_net
     *
     * @return float|null
     */
    public function getTotalPriceNet()
    {
        return $this->container['total_price_net'];
    }

    /**
     * Sets total_price_net
     *
     * @param float|null $total_price_net total_price_net
     *
     * @return self
     */
    public function setTotalPriceNet($total_price_net)
    {
        if (is_null($total_price_net)) {
            throw new \InvalidArgumentException('non-nullable total_price_net cannot be null');
        }
        $this->container['total_price_net'] = $total_price_net;

        return $this;
    }

    /**
     * Gets total_price_gross
     *
     * @return float|null
     */
    public function getTotalPriceGross()
    {
        return $this->container['total_price_gross'];
    }

    /**
     * Sets total_price_gross
     *
     * @param float|null $total_price_gross total_price_gross
     *
     * @return self
     */
    public function setTotalPriceGross($total_price_gross)
    {
        if (is_null($total_price_gross)) {
            throw new \InvalidArgumentException('non-nullable total_price_gross cannot be null');
        }
        $this->container['total_price_gross'] = $total_price_gross;

        return $this;
    }

    /**
     * Gets total_vat
     *
     * @return float|null
     */
    public function getTotalVat()
    {
        return $this->container['total_vat'];
    }

    /**
     * Sets total_vat
     *
     * @param float|null $total_vat total_vat
     *
     * @return self
     */
    public function setTotalVat($total_vat)
    {
        if (is_null($total_vat)) {
            throw new \InvalidArgumentException('non-nullable total_vat cannot be null');
        }
        $this->container['total_vat'] = $total_vat;

        return $this;
    }

    /**
     * Gets serial_number_id
     *
     * @return string|null
     */
    public function getSerialNumberId()
    {
        return $this->container['serial_number_id'];
    }

    /**
     * Sets serial_number_id
     *
     * @param string|null $serial_number_id serial_number_id
     *
     * @return self
     */
    public function setSerialNumberId($serial_number_id)
    {
        if (is_null($serial_number_id)) {
            throw new \InvalidArgumentException('non-nullable serial_number_id cannot be null');
        }
        $this->container['serial_number_id'] = $serial_number_id;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number serial_number
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {
        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets booking_account
     *
     * @return string|null
     */
    public function getBookingAccount()
    {
        return $this->container['booking_account'];
    }

    /**
     * Sets booking_account
     *
     * @param string|null $booking_account booking_account
     *
     * @return self
     */
    public function setBookingAccount($booking_account)
    {
        if (is_null($booking_account)) {
            array_push($this->openAPINullablesSetToNull, 'booking_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('booking_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['booking_account'] = $booking_account;

        return $this;
    }

    /**
     * Gets export_cost_1
     *
     * @return string|null
     */
    public function getExportCost1()
    {
        return $this->container['export_cost_1'];
    }

    /**
     * Sets export_cost_1
     *
     * @param string|null $export_cost_1 export_cost_1
     *
     * @return self
     */
    public function setExportCost1($export_cost_1)
    {
        if (is_null($export_cost_1)) {
            array_push($this->openAPINullablesSetToNull, 'export_cost_1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_cost_1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_cost_1'] = $export_cost_1;

        return $this;
    }

    /**
     * Gets export_cost_2
     *
     * @return string|null
     */
    public function getExportCost2()
    {
        return $this->container['export_cost_2'];
    }

    /**
     * Sets export_cost_2
     *
     * @param string|null $export_cost_2 export_cost_2
     *
     * @return self
     */
    public function setExportCost2($export_cost_2)
    {
        if (is_null($export_cost_2)) {
            array_push($this->openAPINullablesSetToNull, 'export_cost_2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_cost_2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_cost_2'] = $export_cost_2;

        return $this;
    }

    /**
     * Gets cost_price_net
     *
     * @return float|null
     */
    public function getCostPriceNet()
    {
        return $this->container['cost_price_net'];
    }

    /**
     * Sets cost_price_net
     *
     * @param float|null $cost_price_net cost_price_net
     *
     * @return self
     */
    public function setCostPriceNet($cost_price_net)
    {
        if (is_null($cost_price_net)) {
            array_push($this->openAPINullablesSetToNull, 'cost_price_net');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_price_net', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost_price_net'] = $cost_price_net;

        return $this;
    }

    /**
     * Gets cost_price_total
     *
     * @return float|null
     */
    public function getCostPriceTotal()
    {
        return $this->container['cost_price_total'];
    }

    /**
     * Sets cost_price_total
     *
     * @param float|null $cost_price_total cost_price_total
     *
     * @return self
     */
    public function setCostPriceTotal($cost_price_total)
    {
        if (is_null($cost_price_total)) {
            throw new \InvalidArgumentException('non-nullable cost_price_total cannot be null');
        }
        $this->container['cost_price_total'] = $cost_price_total;

        return $this;
    }

    /**
     * Gets cost_price_charge
     *
     * @return float|null
     */
    public function getCostPriceCharge()
    {
        return $this->container['cost_price_charge'];
    }

    /**
     * Sets cost_price_charge
     *
     * @param float|null $cost_price_charge cost_price_charge
     *
     * @return self
     */
    public function setCostPriceCharge($cost_price_charge)
    {
        if (is_null($cost_price_charge)) {
            throw new \InvalidArgumentException('non-nullable cost_price_charge cannot be null');
        }
        $this->container['cost_price_charge'] = $cost_price_charge;

        return $this;
    }

    /**
     * Gets cost_price_charge_type
     *
     * @return string|null
     */
    public function getCostPriceChargeType()
    {
        return $this->container['cost_price_charge_type'];
    }

    /**
     * Sets cost_price_charge_type
     *
     * @param string|null $cost_price_charge_type cost_price_charge_type
     *
     * @return self
     */
    public function setCostPriceChargeType($cost_price_charge_type)
    {
        if (is_null($cost_price_charge_type)) {
            throw new \InvalidArgumentException('non-nullable cost_price_charge_type cannot be null');
        }
        $allowedValues = $this->getCostPriceChargeTypeAllowableValues();
        if (!in_array($cost_price_charge_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cost_price_charge_type', must be one of '%s'",
                    $cost_price_charge_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cost_price_charge_type'] = $cost_price_charge_type;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string|null
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string|null $item_type item_type
     *
     * @return self
     */
    public function setItemType($item_type)
    {
        if (is_null($item_type)) {
            throw new \InvalidArgumentException('non-nullable item_type cannot be null');
        }
        $allowedValues = $this->getItemTypeAllowableValues();
        if (!in_array($item_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'item_type', must be one of '%s'",
                    $item_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


