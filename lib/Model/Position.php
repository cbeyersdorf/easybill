<?php
/**
 * Position
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * easybill REST API
 *
 * The first version of the easybill REST API. [CHANGELOG](https://api.easybill.de/rest/v1/CHANGELOG.md)  ## Authentication  You can choose between two available methods: `Basic Auth` or `Bearer Token`.  In each HTTP request, one of the following HTTP headers is required:  ``` # Basic Auth Authorization: Basic base64_encode('<email>:<api_key>') # Bearer Token Authorization: Bearer <api_key> ```  ## Limitations  ### Request Limit  * PLUS: 10 requests per minute * BUSINESS: 60 requests per minute  If the limit is exceeded, you will receive the HTTP error: `429 Too Many Requests`  ### Result Limit  All result lists are limited to 100 by default. This limit can be increased by the query parameter `limit` to a maximum of 1000.  ## Query filter  Many list resources can be filtered. In `/documents` you can filter e.g. by number with `/documents?number=111028654`. If you want to filter multiple numbers, you can either enter them separated by commas `/documents?number=111028654,222006895` or as an array `/documents?number[]=111028654&number[]=222006895`.  **Warning**: The maximum size of an HTTP request line in bytes is 4094. If this limit is exceeded, you will receive the HTTP error: `414 Request-URI Too Large`  ### Escape commas in query  You can escape commans in query `name=Patrick\\, Peter` if you submit the header `X-Easybill-Escape: true` in your request.  ## Property login_id  This is the login of your admin or employee account.  ## Date and Date-Time format Please use the timezone `Europe/Berlin`. * **date** = *Y-m-d* = `2016-12-31` * **date-time** = *Y-m-d H:i:s* = `2016-12-31 03:13:37`  Date or datetime can be `null` because the attributes have been added later and the entry is older.
 *
 * The version of the OpenAPI document: 1.87.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace cbeyersdorf\easybill\Model;

use \ArrayAccess;
use \cbeyersdorf\easybill\ObjectSerializer;

/**
 * Position Class Doc Comment
 *
 * @category Class
 * @package  cbeyersdorf\easybill
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Position implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Position';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'type' => 'string',
        'number' => 'string',
        'description' => 'string',
        'document_note' => 'string',
        'note' => 'string',
        'unit' => 'string',
        'export_identifier' => 'string',
        'export_identifier_extended' => '\cbeyersdorf\easybill\Model\PositionExportIdentifierExtended',
        'login_id' => 'int',
        'price_type' => 'string',
        'vat_percent' => 'float',
        'sale_price' => 'float',
        'sale_price2' => 'float',
        'sale_price3' => 'float',
        'sale_price4' => 'float',
        'sale_price5' => 'float',
        'sale_price6' => 'float',
        'sale_price7' => 'float',
        'sale_price8' => 'float',
        'sale_price9' => 'float',
        'sale_price10' => 'float',
        'cost_price' => 'float',
        'export_cost1' => 'string',
        'export_cost2' => 'string',
        'group_id' => 'int',
        'stock' => 'string',
        'stock_count' => 'int',
        'stock_limit_notify' => 'bool',
        'stock_limit_notify_frequency' => 'string',
        'stock_limit' => 'int',
        'quantity' => 'float',
        'archived' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'type' => null,
        'number' => null,
        'description' => null,
        'document_note' => null,
        'note' => null,
        'unit' => null,
        'export_identifier' => null,
        'export_identifier_extended' => null,
        'login_id' => 'int64',
        'price_type' => null,
        'vat_percent' => 'float',
        'sale_price' => 'float',
        'sale_price2' => 'float',
        'sale_price3' => 'float',
        'sale_price4' => 'float',
        'sale_price5' => 'float',
        'sale_price6' => 'float',
        'sale_price7' => 'float',
        'sale_price8' => 'float',
        'sale_price9' => 'float',
        'sale_price10' => 'float',
        'cost_price' => 'float',
        'export_cost1' => null,
        'export_cost2' => null,
        'group_id' => 'int64',
        'stock' => null,
        'stock_count' => null,
        'stock_limit_notify' => null,
        'stock_limit_notify_frequency' => null,
        'stock_limit' => null,
        'quantity' => 'float',
        'archived' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'number' => false,
        'description' => false,
        'document_note' => false,
        'note' => true,
        'unit' => true,
        'export_identifier' => true,
        'export_identifier_extended' => false,
        'login_id' => false,
        'price_type' => false,
        'vat_percent' => false,
        'sale_price' => false,
        'sale_price2' => true,
        'sale_price3' => true,
        'sale_price4' => true,
        'sale_price5' => true,
        'sale_price6' => true,
        'sale_price7' => true,
        'sale_price8' => true,
        'sale_price9' => true,
        'sale_price10' => true,
        'cost_price' => true,
        'export_cost1' => true,
        'export_cost2' => true,
        'group_id' => true,
        'stock' => false,
        'stock_count' => false,
        'stock_limit_notify' => false,
        'stock_limit_notify_frequency' => false,
        'stock_limit' => false,
        'quantity' => true,
        'archived' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'number' => 'number',
        'description' => 'description',
        'document_note' => 'document_note',
        'note' => 'note',
        'unit' => 'unit',
        'export_identifier' => 'export_identifier',
        'export_identifier_extended' => 'export_identifier_extended',
        'login_id' => 'login_id',
        'price_type' => 'price_type',
        'vat_percent' => 'vat_percent',
        'sale_price' => 'sale_price',
        'sale_price2' => 'sale_price2',
        'sale_price3' => 'sale_price3',
        'sale_price4' => 'sale_price4',
        'sale_price5' => 'sale_price5',
        'sale_price6' => 'sale_price6',
        'sale_price7' => 'sale_price7',
        'sale_price8' => 'sale_price8',
        'sale_price9' => 'sale_price9',
        'sale_price10' => 'sale_price10',
        'cost_price' => 'cost_price',
        'export_cost1' => 'export_cost1',
        'export_cost2' => 'export_cost2',
        'group_id' => 'group_id',
        'stock' => 'stock',
        'stock_count' => 'stock_count',
        'stock_limit_notify' => 'stock_limit_notify',
        'stock_limit_notify_frequency' => 'stock_limit_notify_frequency',
        'stock_limit' => 'stock_limit',
        'quantity' => 'quantity',
        'archived' => 'archived'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'number' => 'setNumber',
        'description' => 'setDescription',
        'document_note' => 'setDocumentNote',
        'note' => 'setNote',
        'unit' => 'setUnit',
        'export_identifier' => 'setExportIdentifier',
        'export_identifier_extended' => 'setExportIdentifierExtended',
        'login_id' => 'setLoginId',
        'price_type' => 'setPriceType',
        'vat_percent' => 'setVatPercent',
        'sale_price' => 'setSalePrice',
        'sale_price2' => 'setSalePrice2',
        'sale_price3' => 'setSalePrice3',
        'sale_price4' => 'setSalePrice4',
        'sale_price5' => 'setSalePrice5',
        'sale_price6' => 'setSalePrice6',
        'sale_price7' => 'setSalePrice7',
        'sale_price8' => 'setSalePrice8',
        'sale_price9' => 'setSalePrice9',
        'sale_price10' => 'setSalePrice10',
        'cost_price' => 'setCostPrice',
        'export_cost1' => 'setExportCost1',
        'export_cost2' => 'setExportCost2',
        'group_id' => 'setGroupId',
        'stock' => 'setStock',
        'stock_count' => 'setStockCount',
        'stock_limit_notify' => 'setStockLimitNotify',
        'stock_limit_notify_frequency' => 'setStockLimitNotifyFrequency',
        'stock_limit' => 'setStockLimit',
        'quantity' => 'setQuantity',
        'archived' => 'setArchived'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'number' => 'getNumber',
        'description' => 'getDescription',
        'document_note' => 'getDocumentNote',
        'note' => 'getNote',
        'unit' => 'getUnit',
        'export_identifier' => 'getExportIdentifier',
        'export_identifier_extended' => 'getExportIdentifierExtended',
        'login_id' => 'getLoginId',
        'price_type' => 'getPriceType',
        'vat_percent' => 'getVatPercent',
        'sale_price' => 'getSalePrice',
        'sale_price2' => 'getSalePrice2',
        'sale_price3' => 'getSalePrice3',
        'sale_price4' => 'getSalePrice4',
        'sale_price5' => 'getSalePrice5',
        'sale_price6' => 'getSalePrice6',
        'sale_price7' => 'getSalePrice7',
        'sale_price8' => 'getSalePrice8',
        'sale_price9' => 'getSalePrice9',
        'sale_price10' => 'getSalePrice10',
        'cost_price' => 'getCostPrice',
        'export_cost1' => 'getExportCost1',
        'export_cost2' => 'getExportCost2',
        'group_id' => 'getGroupId',
        'stock' => 'getStock',
        'stock_count' => 'getStockCount',
        'stock_limit_notify' => 'getStockLimitNotify',
        'stock_limit_notify_frequency' => 'getStockLimitNotifyFrequency',
        'stock_limit' => 'getStockLimit',
        'quantity' => 'getQuantity',
        'archived' => 'getArchived'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PRODUCT = 'PRODUCT';
    public const TYPE_SERVICE = 'SERVICE';
    public const TYPE_TEXT = 'TEXT';
    public const PRICE_TYPE_BRUTTO = 'BRUTTO';
    public const PRICE_TYPE_NETTO = 'NETTO';
    public const STOCK_YES = 'YES';
    public const STOCK_NO = 'NO';
    public const STOCK_LIMIT_NOTIFY_FREQUENCY_ALWAYS = 'ALWAYS';
    public const STOCK_LIMIT_NOTIFY_FREQUENCY_ONCE = 'ONCE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PRODUCT,
            self::TYPE_SERVICE,
            self::TYPE_TEXT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPriceTypeAllowableValues()
    {
        return [
            self::PRICE_TYPE_BRUTTO,
            self::PRICE_TYPE_NETTO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStockAllowableValues()
    {
        return [
            self::STOCK_YES,
            self::STOCK_NO,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStockLimitNotifyFrequencyAllowableValues()
    {
        return [
            self::STOCK_LIMIT_NOTIFY_FREQUENCY_ALWAYS,
            self::STOCK_LIMIT_NOTIFY_FREQUENCY_ONCE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], 'PRODUCT');
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('document_note', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('export_identifier', $data ?? [], null);
        $this->setIfExists('export_identifier_extended', $data ?? [], null);
        $this->setIfExists('login_id', $data ?? [], null);
        $this->setIfExists('price_type', $data ?? [], 'NETTO');
        $this->setIfExists('vat_percent', $data ?? [], 19.0);
        $this->setIfExists('sale_price', $data ?? [], null);
        $this->setIfExists('sale_price2', $data ?? [], null);
        $this->setIfExists('sale_price3', $data ?? [], null);
        $this->setIfExists('sale_price4', $data ?? [], null);
        $this->setIfExists('sale_price5', $data ?? [], null);
        $this->setIfExists('sale_price6', $data ?? [], null);
        $this->setIfExists('sale_price7', $data ?? [], null);
        $this->setIfExists('sale_price8', $data ?? [], null);
        $this->setIfExists('sale_price9', $data ?? [], null);
        $this->setIfExists('sale_price10', $data ?? [], null);
        $this->setIfExists('cost_price', $data ?? [], null);
        $this->setIfExists('export_cost1', $data ?? [], null);
        $this->setIfExists('export_cost2', $data ?? [], null);
        $this->setIfExists('group_id', $data ?? [], null);
        $this->setIfExists('stock', $data ?? [], 'NO');
        $this->setIfExists('stock_count', $data ?? [], null);
        $this->setIfExists('stock_limit_notify', $data ?? [], false);
        $this->setIfExists('stock_limit_notify_frequency', $data ?? [], 'ALWAYS');
        $this->setIfExists('stock_limit', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        $allowedValues = $this->getPriceTypeAllowableValues();
        if (!is_null($this->container['price_type']) && !in_array($this->container['price_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'price_type', must be one of '%s'",
                $this->container['price_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['sale_price'] === null) {
            $invalidProperties[] = "'sale_price' can't be null";
        }
        $allowedValues = $this->getStockAllowableValues();
        if (!is_null($this->container['stock']) && !in_array($this->container['stock'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stock', must be one of '%s'",
                $this->container['stock'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStockLimitNotifyFrequencyAllowableValues();
        if (!is_null($this->container['stock_limit_notify_frequency']) && !in_array($this->container['stock_limit_notify_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'stock_limit_notify_frequency', must be one of '%s'",
                $this->container['stock_limit_notify_frequency'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The positions name or description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets document_note
     *
     * @return string|null
     */
    public function getDocumentNote()
    {
        return $this->container['document_note'];
    }

    /**
     * Sets document_note
     *
     * @param string|null $document_note This field can be used in the document text areas with the liquid placeholder {{document.item_notes}}. Every note is only displayed once for every kind of product. This is useful if you want to add something like an instruction.
     *
     * @return self
     */
    public function setDocumentNote($document_note)
    {
        if (is_null($document_note)) {
            throw new \InvalidArgumentException('non-nullable document_note cannot be null');
        }
        $this->container['document_note'] = $document_note;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Note for internal use
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            array_push($this->openAPINullablesSetToNull, 'unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets export_identifier
     *
     * @return string|null
     */
    public function getExportIdentifier()
    {
        return $this->container['export_identifier'];
    }

    /**
     * Sets export_identifier
     *
     * @param string|null $export_identifier The FAS-Account is the four-digit revenue account, in which the revenue will be entered when doing the export to your tax consultant. In case you want to split your revenue to several revenue accounts, please talk to your tax consultant before, to guarantee an unobstructed use of the interface. For every revenue element, there are number ranges, which can be used. Please avoid using combinations of numbers, which can not be used by your tax consultant.
     *
     * @return self
     */
    public function setExportIdentifier($export_identifier)
    {
        if (is_null($export_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'export_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_identifier'] = $export_identifier;

        return $this;
    }

    /**
     * Gets export_identifier_extended
     *
     * @return \cbeyersdorf\easybill\Model\PositionExportIdentifierExtended|null
     */
    public function getExportIdentifierExtended()
    {
        return $this->container['export_identifier_extended'];
    }

    /**
     * Sets export_identifier_extended
     *
     * @param \cbeyersdorf\easybill\Model\PositionExportIdentifierExtended|null $export_identifier_extended export_identifier_extended
     *
     * @return self
     */
    public function setExportIdentifierExtended($export_identifier_extended)
    {
        if (is_null($export_identifier_extended)) {
            throw new \InvalidArgumentException('non-nullable export_identifier_extended cannot be null');
        }
        $this->container['export_identifier_extended'] = $export_identifier_extended;

        return $this;
    }

    /**
     * Gets login_id
     *
     * @return int|null
     */
    public function getLoginId()
    {
        return $this->container['login_id'];
    }

    /**
     * Sets login_id
     *
     * @param int|null $login_id login_id
     *
     * @return self
     */
    public function setLoginId($login_id)
    {
        if (is_null($login_id)) {
            throw new \InvalidArgumentException('non-nullable login_id cannot be null');
        }
        $this->container['login_id'] = $login_id;

        return $this;
    }

    /**
     * Gets price_type
     *
     * @return string|null
     */
    public function getPriceType()
    {
        return $this->container['price_type'];
    }

    /**
     * Sets price_type
     *
     * @param string|null $price_type price_type
     *
     * @return self
     */
    public function setPriceType($price_type)
    {
        if (is_null($price_type)) {
            throw new \InvalidArgumentException('non-nullable price_type cannot be null');
        }
        $allowedValues = $this->getPriceTypeAllowableValues();
        if (!in_array($price_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'price_type', must be one of '%s'",
                    $price_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['price_type'] = $price_type;

        return $this;
    }

    /**
     * Gets vat_percent
     *
     * @return float|null
     */
    public function getVatPercent()
    {
        return $this->container['vat_percent'];
    }

    /**
     * Sets vat_percent
     *
     * @param float|null $vat_percent vat_percent
     *
     * @return self
     */
    public function setVatPercent($vat_percent)
    {
        if (is_null($vat_percent)) {
            throw new \InvalidArgumentException('non-nullable vat_percent cannot be null');
        }
        $this->container['vat_percent'] = $vat_percent;

        return $this;
    }

    /**
     * Gets sale_price
     *
     * @return float
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param float $sale_price Price in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice($sale_price)
    {
        if (is_null($sale_price)) {
            throw new \InvalidArgumentException('non-nullable sale_price cannot be null');
        }
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets sale_price2
     *
     * @return float|null
     */
    public function getSalePrice2()
    {
        return $this->container['sale_price2'];
    }

    /**
     * Sets sale_price2
     *
     * @param float|null $sale_price2 Price for customers of group 2 in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice2($sale_price2)
    {
        if (is_null($sale_price2)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_price2'] = $sale_price2;

        return $this;
    }

    /**
     * Gets sale_price3
     *
     * @return float|null
     */
    public function getSalePrice3()
    {
        return $this->container['sale_price3'];
    }

    /**
     * Sets sale_price3
     *
     * @param float|null $sale_price3 Price for customers of group 3 in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice3($sale_price3)
    {
        if (is_null($sale_price3)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_price3'] = $sale_price3;

        return $this;
    }

    /**
     * Gets sale_price4
     *
     * @return float|null
     */
    public function getSalePrice4()
    {
        return $this->container['sale_price4'];
    }

    /**
     * Sets sale_price4
     *
     * @param float|null $sale_price4 Price for customers of group 4 in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice4($sale_price4)
    {
        if (is_null($sale_price4)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_price4'] = $sale_price4;

        return $this;
    }

    /**
     * Gets sale_price5
     *
     * @return float|null
     */
    public function getSalePrice5()
    {
        return $this->container['sale_price5'];
    }

    /**
     * Sets sale_price5
     *
     * @param float|null $sale_price5 Price for customers of group 5 in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice5($sale_price5)
    {
        if (is_null($sale_price5)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_price5'] = $sale_price5;

        return $this;
    }

    /**
     * Gets sale_price6
     *
     * @return float|null
     */
    public function getSalePrice6()
    {
        return $this->container['sale_price6'];
    }

    /**
     * Sets sale_price6
     *
     * @param float|null $sale_price6 Price for customers of group 6 in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice6($sale_price6)
    {
        if (is_null($sale_price6)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_price6'] = $sale_price6;

        return $this;
    }

    /**
     * Gets sale_price7
     *
     * @return float|null
     */
    public function getSalePrice7()
    {
        return $this->container['sale_price7'];
    }

    /**
     * Sets sale_price7
     *
     * @param float|null $sale_price7 Price for customers of group 7 in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice7($sale_price7)
    {
        if (is_null($sale_price7)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_price7'] = $sale_price7;

        return $this;
    }

    /**
     * Gets sale_price8
     *
     * @return float|null
     */
    public function getSalePrice8()
    {
        return $this->container['sale_price8'];
    }

    /**
     * Sets sale_price8
     *
     * @param float|null $sale_price8 Price for customers of group 8 in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice8($sale_price8)
    {
        if (is_null($sale_price8)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_price8'] = $sale_price8;

        return $this;
    }

    /**
     * Gets sale_price9
     *
     * @return float|null
     */
    public function getSalePrice9()
    {
        return $this->container['sale_price9'];
    }

    /**
     * Sets sale_price9
     *
     * @param float|null $sale_price9 Price for customers of group 9 in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice9($sale_price9)
    {
        if (is_null($sale_price9)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_price9'] = $sale_price9;

        return $this;
    }

    /**
     * Gets sale_price10
     *
     * @return float|null
     */
    public function getSalePrice10()
    {
        return $this->container['sale_price10'];
    }

    /**
     * Sets sale_price10
     *
     * @param float|null $sale_price10 Price for customers of group 10 in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setSalePrice10($sale_price10)
    {
        if (is_null($sale_price10)) {
            array_push($this->openAPINullablesSetToNull, 'sale_price10');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sale_price10', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sale_price10'] = $sale_price10;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return float|null
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param float|null $cost_price Price in cents (e.g. \"150\" = 1.50€)
     *
     * @return self
     */
    public function setCostPrice($cost_price)
    {
        if (is_null($cost_price)) {
            array_push($this->openAPINullablesSetToNull, 'cost_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cost_price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets export_cost1
     *
     * @return string|null
     */
    public function getExportCost1()
    {
        return $this->container['export_cost1'];
    }

    /**
     * Sets export_cost1
     *
     * @param string|null $export_cost1 export_cost1
     *
     * @return self
     */
    public function setExportCost1($export_cost1)
    {
        if (is_null($export_cost1)) {
            array_push($this->openAPINullablesSetToNull, 'export_cost1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_cost1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_cost1'] = $export_cost1;

        return $this;
    }

    /**
     * Gets export_cost2
     *
     * @return string|null
     */
    public function getExportCost2()
    {
        return $this->container['export_cost2'];
    }

    /**
     * Sets export_cost2
     *
     * @param string|null $export_cost2 export_cost2
     *
     * @return self
     */
    public function setExportCost2($export_cost2)
    {
        if (is_null($export_cost2)) {
            array_push($this->openAPINullablesSetToNull, 'export_cost2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('export_cost2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['export_cost2'] = $export_cost2;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int|null
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int|null $group_id group_id
     *
     * @return self
     */
    public function setGroupId($group_id)
    {
        if (is_null($group_id)) {
            array_push($this->openAPINullablesSetToNull, 'group_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return string|null
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param string|null $stock Activates stock management for this position
     *
     * @return self
     */
    public function setStock($stock)
    {
        if (is_null($stock)) {
            throw new \InvalidArgumentException('non-nullable stock cannot be null');
        }
        $allowedValues = $this->getStockAllowableValues();
        if (!in_array($stock, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stock', must be one of '%s'",
                    $stock,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets stock_count
     *
     * @return int|null
     */
    public function getStockCount()
    {
        return $this->container['stock_count'];
    }

    /**
     * Sets stock_count
     *
     * @param int|null $stock_count Current stock count
     *
     * @return self
     */
    public function setStockCount($stock_count)
    {
        if (is_null($stock_count)) {
            throw new \InvalidArgumentException('non-nullable stock_count cannot be null');
        }
        $this->container['stock_count'] = $stock_count;

        return $this;
    }

    /**
     * Gets stock_limit_notify
     *
     * @return bool|null
     */
    public function getStockLimitNotify()
    {
        return $this->container['stock_limit_notify'];
    }

    /**
     * Sets stock_limit_notify
     *
     * @param bool|null $stock_limit_notify Notify when stock_count is lower than stock_limit
     *
     * @return self
     */
    public function setStockLimitNotify($stock_limit_notify)
    {
        if (is_null($stock_limit_notify)) {
            throw new \InvalidArgumentException('non-nullable stock_limit_notify cannot be null');
        }
        $this->container['stock_limit_notify'] = $stock_limit_notify;

        return $this;
    }

    /**
     * Gets stock_limit_notify_frequency
     *
     * @return string|null
     */
    public function getStockLimitNotifyFrequency()
    {
        return $this->container['stock_limit_notify_frequency'];
    }

    /**
     * Sets stock_limit_notify_frequency
     *
     * @param string|null $stock_limit_notify_frequency Notify frequency when stock_count is lower than stock_limit (ALWAYS, ONCE)
     *
     * @return self
     */
    public function setStockLimitNotifyFrequency($stock_limit_notify_frequency)
    {
        if (is_null($stock_limit_notify_frequency)) {
            throw new \InvalidArgumentException('non-nullable stock_limit_notify_frequency cannot be null');
        }
        $allowedValues = $this->getStockLimitNotifyFrequencyAllowableValues();
        if (!in_array($stock_limit_notify_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'stock_limit_notify_frequency', must be one of '%s'",
                    $stock_limit_notify_frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stock_limit_notify_frequency'] = $stock_limit_notify_frequency;

        return $this;
    }

    /**
     * Gets stock_limit
     *
     * @return int|null
     */
    public function getStockLimit()
    {
        return $this->container['stock_limit'];
    }

    /**
     * Sets stock_limit
     *
     * @param int|null $stock_limit stock_limit
     *
     * @return self
     */
    public function setStockLimit($stock_limit)
    {
        if (is_null($stock_limit)) {
            throw new \InvalidArgumentException('non-nullable stock_limit cannot be null');
        }
        $this->container['stock_limit'] = $stock_limit;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity Used as the default quantity when adding this position to a document
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            array_push($this->openAPINullablesSetToNull, 'quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        if (is_null($archived)) {
            throw new \InvalidArgumentException('non-nullable archived cannot be null');
        }
        $this->container['archived'] = $archived;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


